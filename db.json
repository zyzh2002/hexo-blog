{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"source/images/paw-solid.svg","path":"images/paw-solid.svg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/SPEI计算的原理与算法优化.md","hash":"b1400908e791ab71cd2b6a529dc41c8be7d6757b","modified":1738031443923},{"_id":"source/_posts/使用docker-compose搭建wordpress博客.md","hash":"1c974420a5fc0677949f08ddfa548a94ff5b5464","modified":1738031443923},{"_id":"source/_posts/SPEI计算的原理与算法优化/graph1.png","hash":"05bf1899c03a7a13e6cec1039bee85ad24f9aa42","modified":1737989926642},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1737980435337},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1737980435382},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1737980435361},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1737980435401},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1737980435417},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1737980434884},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1737980435201},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1737980435029},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1737980435266},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1737980435312},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1737980435832},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1737980435428},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1737980435837},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"f5bf0acf4fee3b57046e0be507d2d324e2b8805f","modified":1737980435670},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"4b8a3096137e0d879fb17972a69630bde38d8212","modified":1737980435483},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"e02471f80db87db43aa7d527176e195b60dc4b99","modified":1737980435502},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"040fed1d0d7e4d8003446d1541bc15a2c4b4e500","modified":1737980435553},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1737980435942},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1737980435946},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1737980435950},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"b992b68705f5050a99de926525b3cb40d95c4769","modified":1737980435953},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1737980435958},{"_id":"node_modules/hexo-theme-icarus/languages/it.yml","hash":"b76999994cda6b08b53d34c3dd67947f164de655","modified":1737980435962},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1737980435965},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1737980435970},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1737980435973},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1737980435976},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1737980435979},{"_id":"node_modules/hexo-theme-icarus/languages/sv.yml","hash":"b12eee168c52aac855ffce9f78fe5fd5d6e3970c","modified":1737980435982},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1737980435986},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1737980435990},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1737980435993},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1737980435999},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"daf8eca64197709a9dc4a4792c403a32d78bdfae","modified":1737980435728},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1737980435996},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1737980435742},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"2313be8301011d218830b853b294b022ce81b423","modified":1737980435746},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1737980435770},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1737980435775},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1737980435782},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1737980435795},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"a9a08c9f3eec8994d37149d1ab19f2b5b8f4cd2f","modified":1737980435815},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1737980435826},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"93a79969c7eb47cfac097893cda36368db56902c","modified":1737980435524},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"7189efe33d18927d3790e8afb06642fb293b8603","modified":1737980435513},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"a46da71c20fa9d73c1bac26fda77717abae1b308","modified":1737980435564},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1737980435571},{"_id":"node_modules/hexo-theme-icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1737980435578},{"_id":"node_modules/hexo-theme-icarus/include/migration/v5_v5.1.js","hash":"073f22bd16e34b56f016633b1676dab2e7d8843d","modified":1737980435589},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"f233678cd656c0e300181ca79dd30cb42fc213b3","modified":1737980435638},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1737980435855},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1737980435859},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1737980435866},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1737980435862},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"ec54dc24eb4d9802d8fefc44c210558bc1641109","modified":1737980435869},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1737980435882},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1737980435884},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1737980435891},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1737980435896},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":1737980435900},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1737980435903},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1737980435908},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1737980435887},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1737980435915},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1737980435921},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1737980435495},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"c4fc3c016de42c50614f70538a23359eee905ed3","modified":1737980435734},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"76ee7c6687e96e6262985323665d6273a37e54c5","modified":1737980435751},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"fd52330d582fd122db7f55444c2f3368ff4bd8d7","modified":1737980435756},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"bf783d5ef6d58924150472637c6c17782c83e102","modified":1737980435765},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1737980435780},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"2e27800b2a8a87112c96778db858c3419d890b79","modified":1737980435791},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"5d07312406b401e8d4e9584b4d41ed7377993935","modified":1737980435805},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"0fad6f8a91bb5cf678b9ff2d66d2162d61625074","modified":1737980435812},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"1409627d98a92b4f5b2ab829f8e6b50b75d60e53","modified":1737980435809},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"de966666f1e4ef80e0d15081b2709c3065b246dd","modified":1737980435761},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"7a89ac72a988d13b4714ab78a6dfd5cd8de85d47","modified":1737980435829},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1737980435720},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"f86a0bae3a92bc07bd674f03a046fb1b6c1b48af","modified":1737980435738},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/pjax.jsx","hash":"65956102d5faabcedaaafb14b0201548f15e60ce","modified":1737980435786},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"2322a2b24e63bfb44b2acfc07795435f8c89d511","modified":1737980435801},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1737980435874},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1737980435878},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1737980435844},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1737980435924},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1737980435929},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1737980435851},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1737980435932},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1737980435935},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1737980435448},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1737980435470},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"37f3b16fbd9668b9496d5f2d9bd9fb22fc6cee27","modified":1737980435536},{"_id":"node_modules/hexo-theme-icarus/source/js/pjax.js","hash":"dfc55138a1ba97a312e469201bd23f386cce7ba7","modified":1737980435545},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1737980435459},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1737980435912},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1737980435614},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"265120b80df9808358df3ff7c4eada8a66512a4b","modified":1737980435630},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"e85c9d7f2579805beb252a1b6345d5a668a13baa","modified":1737980435651},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1737980435658},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1737980435645},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1737980435664},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"04c0738dc0a3ed89aecae2aee4ab60173f09e66b","modified":1737980435680},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1737980435693},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1737980435698},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1737980435703},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1737980435709},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1737980435714},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1737980435601},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1737980435621},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/pjax.json","hash":"1f6218016569eb9cd354a06a9537c7110efb5f17","modified":1737980435674},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1737980435688},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1738032023370},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1738032023370},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1738032023370},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1738032023370},{"_id":"public/content.json","hash":"6b8146027e8a0a134ed6ebccaae473fbd8aae4a5","modified":1738032023370},{"_id":"public/manifest.json","hash":"26d932a97bd24e4c1eb2273f081df9d1abed46cb","modified":1738032023370},{"_id":"public/2024/04/15/SPEI计算的原理与算法优化/index.html","hash":"9b7da7b0b1c466db860ba224fd1201f289e85b07","modified":1738032023370},{"_id":"public/2024/02/27/使用docker-compose搭建wordpress博客/index.html","hash":"56f5b86ca810bfca1fd230c5ac778846e8afce31","modified":1738032023370},{"_id":"public/archives/index.html","hash":"2ad19656f0153e0276b93fd2c2351eafbc66ac03","modified":1738032023370},{"_id":"public/archives/2024/index.html","hash":"3f0dd7b3e57ee639ef1b939187236fbe85bb622f","modified":1738032023370},{"_id":"public/archives/2024/02/index.html","hash":"1651b5aa23949acffa3ab2287babb0049f56588d","modified":1738032023370},{"_id":"public/archives/2024/04/index.html","hash":"94c1175e33470ce5829e0b9572f1b094177aa050","modified":1738032023370},{"_id":"public/index.html","hash":"40e6897e021759eb6032cd5a8910f8d623f8c2b1","modified":1738032023370},{"_id":"public/categories/index.html","hash":"6a45b03a2fa542653b2780cc8d1aa34ed5abecb4","modified":1738032023370},{"_id":"public/tags/index.html","hash":"c26cb89e8b63d1045919fd0b471e7629be8cfeeb","modified":1738032023370},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1738032023370},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1738032023370},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1738032023370},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1738032023370},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1738032023370},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1738032023370},{"_id":"public/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1738032023370},{"_id":"public/css/cyberpunk.css","hash":"b462177bee11f76e84e649f8192d5a68cb4b1402","modified":1738032023370},{"_id":"public/css/default.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1738032023370},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1738032023370},{"_id":"public/js/main.js","hash":"37f3b16fbd9668b9496d5f2d9bd9fb22fc6cee27","modified":1738032023370},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1738032023370},{"_id":"public/js/pjax.js","hash":"dfc55138a1ba97a312e469201bd23f386cce7ba7","modified":1738032023370},{"_id":"public/css/style.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1738032023370},{"_id":"public/2024/04/15/SPEI计算的原理与算法优化/graph1.png","hash":"05bf1899c03a7a13e6cec1039bee85ad24f9aa42","modified":1738032023370},{"_id":"source/images/paw-solid.svg","hash":"8dbea7af3a1b6dba1bd8a03f227db9d653b87469","modified":1737991899171},{"_id":"public/images/paw-solid.svg","hash":"8dbea7af3a1b6dba1bd8a03f227db9d653b87469","modified":1738032023370},{"_id":"public/categories/瞎折腾记录/index.html","hash":"865302ebfc4cfc88076590a3374514df018c9304","modified":1738032023370},{"_id":"public/categories/实用技术/index.html","hash":"61be1c9a1c6b279cf2c9bac01cd4cb962f467743","modified":1738032023370}],"Category":[{"name":"瞎折腾记录","_id":"cm6f7oq730000h0vbfgji0gwp"},{"name":"实用技术","_id":"cm6f7p3kp0002h0vbgvlr5r4v"}],"Data":[],"Page":[],"Post":[{"title":"SPEI计算的原理与算法优化","date":"2024-04-15T12:29:44.000Z","toc":true,"_content":"\n## 什么是SPEI\n\n标准化降水蒸散指数SPEI（Standardized Precipitation Evapotranspiration Index）可以表征干湿状态。\nSPEI值越大越湿润，越小越干旱，其最早由Sergio M. Vicente-Serrano等人[提出](http://www.ipe.csic.es/vicente-serrano-s.m.)。\n\n<!-- more -->\n\n## SPEI算法\n\n### 构建差值序列\n\n首先构建降水量$P_i$和潜在蒸散发$PET_i$的差值序列$D_i$，\n\n$$ D_i = P_i-PET_i $$\n\n可以选定不同的时间尺度来计算SPEI。时间尺度为$k$，$i$日的$D_i$累计为该日前$k$天的$D_i$之和，也就是说，对于每个$k$尺度的$D_i$，其为前$k$天的滑动窗口和。\n\n### 对差值序列进行拟合\n\n目前常见的SPEI拟合方法均为使用三参数Log-Logistic分布（也称Fisk分布）对$D_i$进行拟合。近几年的研究显示，Genextreme分布对SPEI有[更好的拟合效果](https://onlinelibrary.wiley.com/doi/abs/10.1002/joc.6081)。\n\nPython在GIS系统中有其重要的生态位，但是使用Python对SPEI进行计算十分低效。传统方法中，若使用`Scipy`和循环进行Fisk分布的参数估计，计算大型数据集将十分困难，考虑如下代码：\n\n```python\nimport numpy as np\n\ndef calc_spei_fisk_paras(d_i_matrix:np.ndarray) -> np.ndarray:\n    from scipy.stats import fisk\n\n    d_i_shape = d_i_matrix.shape # d_i_matrix is the numpy array with the shape (time,x,y)\n\n    paras = np.zeros_like(d_i_shape)[0:3,:,:] # Storage fisk distribution paras\n\n    for i in d_i_shape[1]:\n        for j in d_i_shape[2]:\n            paras[:,i,j] = fisk.fit(d_i_matrix[:,i,j])\n\n    return paras\n```\n\n该函数使用二重嵌套循环对SPEI进行计算，因为Python的特性，该段代码的执行将极度缓慢，面对高分辨率图象时尤其明显。要对该算法进行优化，有以下几个方向：\n\n* 循环向量化\n* 寻找新的参数估计模式\n* jit编译\n\n### 概率值正态化\n\n序列值代入已估计参数的Genextreme分布得到概率值$P_i$；之后将概率值代入标准正态分布累积分布函数的反函数，得到SPEI值：\n\n$$ \\mathrm{SPEI}_i = \\Phi^{-1}(P_i) $$\n***\n\n## 算法优化\n\n### 循环向量化\n\n循环向量化指将使用循环进行的操作改为操作向量，C语言在编译时编译器会自动地将循环优化成处理器支持的SIMD指令。\n> SIMD(Single Instruction Multiple Data)即单指令流多数据流，是一种采用一个控制器来控制多个处理器，同时对一组数据（又称“数据向量”）中的每一个分别执行相同的操作从而实现空间上的并行性的技术。\n\n考虑以下C代码，\n\n```C\n/*\nsimd.c\nTest the simd optimization support for gcc\n */\n#include <stdio.h>\n#define LENGTH(array) (sizeof(array) / sizeof(array[0]))\n\nint main(){\n    int vec1 [3];\n    int vec2 [3];\n    printf(\"Input the First Vec:\\n\");\n    scanf(\"%d%d%d\",&vec1[0],&vec1[1],&vec1[2]);\n    printf(\"Input the Secound Vec:\\n\");\n    scanf(\"%d%d%d\",&vec2[0],&vec2[1],&vec2[2]);\n\n    int vec3[3];\n\n    for(int i = 0;i<LENGTH(vec1);i++){\n        vec3[i] = vec1[i]+vec2[i];\n    }\n\n    printf(\"Sum Vector is %d %d %d\\n\",vec3[0],vec3[1],vec3[2]);\n\n    return 0;\n}\n```\n\n该程序将两个`int`类型的变量使用循环相加。在AMD64机器上使用gcc的`-O1`和`-O3`优化选项分别编译得到汇编文件：\n\n```console\ngcc simd.c -S -o simd_O1.S -O1 -v\n\ngcc simd.c -S -o simd_O3.S -O3 -v\n```\n\n我们只关注`scanf`调用和`printf`调用之间的部分，汇编文件分别为：\n\n```nasm\n# simd_O1.S\ncall    __isoc99_scanf\nmovl    16(%rsp), %ecx\naddl    28(%rsp), %ecx\nmovl    12(%rsp), %edx\naddl    24(%rsp), %edx\nmovl    8(%rsp), %esi\naddl    20(%rsp), %esi\nmovl    $.LC3, %edi\nmovl    $0, %eax\ncall    printf\n```\n\n```nasm\n# simd_O3.S\ncall    __isoc99_scanf\nmovl    24(%rsp), %ecx\nmovl    $.LC3, %edi\nxorl    %eax, %eax\nmovq    (%rsp), %xmm0\nmovq    16(%rsp), %xmm1\naddl    8(%rsp), %ecx\npaddd   %xmm1, %xmm0\npextrd  $1, %xmm0, %edx\nmovd    %xmm0, %esi\ncall    printf\n```\n\n在没有使用优化的情况下，程序使用了3条`addl`指令，而优化过后其使用了`xmm`寄存器（SSE指令集）提升了计算效率。但Python解释器没有内建的SIMD支持，要解决这种问题可以使用`numpy`包：\n\n```python\nimport numpy as np\nimport timeit\n\ndef sum_numpy(a:np.ndarray, b:np.ndarray) -> np.ndarray:\n    return np.sum(a + b)\n\n\ndef sum_circulate(a:np.ndarray, b:np.ndarray) -> np.ndarray:\n    n = len(a)\n    c = np.zeros(n)\n    for i in range(n):\n        c[i] = a[i] + b[i]\n    return np.sum(c)\n\n\na = np.random.rand(10000)\nb = np.random.rand(10000)\n\nprint(timeit.timeit(lambda: sum_numpy(a, b), number=100))\nprint(timeit.timeit(lambda: sum_circulate(a, b), number=100))\n```\n\n输出结果不难预测，\n\n```console\n0.004135900000619586\n0.6949793999992835\n```\n\n`numpy`版本的向量加法比循环版本快了170多倍。如果我们以数组规模和所用时间作图，我们得到以下结果：\n\n![时间比较](graph1.png)\n\n问题规模越大，SIMD带来的加速效果越明显。但是`scipy`中的参数估计方法无法实现循环向量化，一次只能处理一个时间序列；而且修改`scipy`中的代码的成本又太高（大部分代码均由C语言写成），所以需要找新的参数估计模式。\n\n### Genextreme分布与L-moments\n\nGenextreme分布是[相对更好的SPEI拟合的候选分布](https://doi.org/10.1002/joc.6081)。其参数估计可以简单的使用L-moments[估计得到](https://ascelibrary.org/doi/10.1061/%28ASCE%291084-0699%282007%2912%3A6%28682%29)。\n\n使用L-moments的参数估计过程可以由以下公式给出：\n\nGEV分布的CDF为\n\n\\\\begin{equation}\nF(x)=\\\\left\\\\{\n    \\\\begin{aligned}\n    \\\\mathrm{exp}(-(1-\\\\kappa\\\\frac{x-\\\\xi}{\\\\alpha})^{1/\\\\kappa}),\\\\kappa\\\\not= 0 \\\\\\\\\n    \\\\mathrm{exp}(\\\\mathrm{exp}(-\\\\frac{x-\\\\xi}{\\\\alpha})),\\\\kappa = 0\n    \\\\end{aligned}\n\\\\right.\n\\\\end{equation}\n\n其中$\\alpha,\\xi,\\kappa$为参数。\n\n记L-mean，L-scale，L-skewness分别为$\\lambda_1,\\lambda_2,\\tau_3$，GEV分布的三个参数可以用如下公式近似估计：\n\n\\\\begin{equation}\n\\\\kappa =\\\\left\\\\{\n    \\\\begin{aligned}\n    &0.488138(\\\\tau_3)^{1.70839}-1.7631(\\\\tau_3)^{0.981824}+0.285706, 0.01\\\\le\\\\tau_3\\\\le 0.5 \\\\\\\\\n    &0.483706(\\\\tau_3)^{1.679096}-1.73786(\\\\tau_3)^{1.008948}+0.255108, 0.5\\\\le\\\\tau_3\\\\le 0.95\n    \\\\end{aligned}\n\\\\right.\n\\\\end{equation}\n\n\\\\begin{equation}\n\\\\frac{\\\\alpha}{\\\\lambda_2}=\\\\left\\\\{\n    \\\\begin{aligned}\n    &1.023602813(\\\\tau_3)^{1.8850974}-2.95087636(\\\\tau_3)^{1.195591244}+1.7599614982, -0.5\\\\le \\\\kappa \\\\le 0.3 \\\\\\\\\n    &1.5954866(\\\\tau_3)^{1.5816175}-3.886135(\\\\tau_3)^{0.89522}+2.310643, \\\\kappa > 0.3\n    \\\\end{aligned}\n\\\\right.\n\\\\end{equation}\n\n\\\\begin{equation}\n\\\\frac{\\\\xi-\\\\lambda_1}{\\\\lambda_2}=-0.0937(\\\\tau_3)^4-0.2198(\\\\tau_3)^3+1.407(\\\\tau_3)^2-1.4825(\\\\tau_3)-0.6205, 0.01\\\\le\\\\tau_3\\\\le 0.95\n\\\\end{equation}\n\n线性矩$\\lambda_1,\\lambda_2,\\tau_3$可以使用`lmoments3`包中的代码修改而来。`lmoments3`包中的线性矩计算方法可以简单的进行修改，以实现循环向量化：\n\n```python\n# Here are just a few of the key codes\nimport numpy as np\nimport numba as nb # numba jit, which will be introduced next\n...\n@nb.njit(nb.float64[:, :, :](nb.float64[:, :, :], nb.int8), parallel=True, cache=True)\ndef get_lratios_jit(x: np.ndarray, nmom: int = 5) -> np.ndarray:\n    \"\"\"\n    Calculates L-moments (up to the specified order) of an array of data using Numba JIT compilation.\n\n    Args:\n        x (np.ndarray): A 3D array of data.\n        nmom (int, optional): The order of L-moments to compute (default is 5).\n\n    Returns:\n        np.ndarray: An array containing L-moments up to the specified order.\n    \"\"\"\n    def sort_array_with_axis(x: np.ndarray, axis: int) -> np.ndarray:\n        \"\"\"\n        Sorts the input array along the specified axis.\n\n        Args:\n            x (np.ndarray): Input array.\n            axis (int): Axis along which to sort.\n\n        Returns:\n            np.ndarray: Sorted array.\n        \"\"\"\n        for i in nb.prange(x.shape[axis]):\n            x[i] = np.sort(x[i])\n        return x\n\n    x = np.asarray(x, dtype=np.float64)\n    n = x.shape[0]\n\n    x = sort_array_with_axis(x, 0)\n\n    sum_xtrans = np.empty_like(x[0])\n\n    def comb(n, r):\n        \"\"\"\n        Computes the binomial coefficient (n choose r).\n\n        Args:\n            n (int): Total number of items.\n            r (int): Number of items to choose.\n\n        Returns:\n            int: Binomial coefficient.\n        \"\"\"\n        if r < 0 or r > n:\n            return 0\n        if r == 0 or r == n:\n            return 1\n        c = 1\n        for i in range(1, r + 1):\n            c = c * (n - i + 1) // i\n        return c\n\n    # First L-moment\n\n    l1 = np.sum(x, axis=0) / comb(n, 1)\n\n    if nmom == 1:\n        return np.expand_dims(l1, axis=0)\n\n    # Second L-moment\n\n    comb1 = np.arange(n)\n    coefl2 = 0.5 / comb(n, 2)\n    sum_xtrans[:] = 0\n    for i in nb.prange(n):\n        sum_xtrans += (comb1[i] - comb1[n - 1 - i]) * x[i]\n    l2 = coefl2 * sum_xtrans\n\n    if nmom == 2:\n        return np.stack((l1, l2))\n\n    # Third L-moment\n\n    comb3 = np.zeros(n)\n    for i in range(n):\n        comb3[i] = comb(i, 2)\n    coefl3 = 1.0 / 3.0 / comb(n, 3)\n    sum_xtrans[:] = 0\n    for i in nb.prange(n):\n        sum_xtrans += (\n            comb3[i] - 2 * comb1[i] * comb1[n - 1 - i] + comb3[n - 1 - i]\n        ) * x[i]\n    l3 = coefl3 * sum_xtrans / l2\n\n    if nmom == 3:\n        return np.stack((l1, l2, l3))\n...\n```\n\n由以上示例代码能计算出$\\lambda_1,\\lambda_2,\\tau_3$， 便可以由参数估计的公式给出参数值，进而描述Genextreme分布\n\n### jit编译\n\njit 的全称是 Just-in-time，在我们使用的`numba`库里面则特指Just-in-time Compilation（即时编译）。因为Python的动态类型带来的低效率，需要使用jit技术加速python代码的运行。在代码第一次被执行时将被编译为高效的机器码，同时也能由编译器执行相应的编译优化，以提高执行效率。但是，`numba`并不是对所有的Python代码都有优化效果，使用前需要去`numba`[的官方文档](https://numba.readthedocs.io/en/stable/reference/pysupported.html)查看他支持的python功能和`numpy`功能。\n\n在上一节中给出的代码就包含了`numba`包，\n\n```python\nimport numpy as np\nimport numba as nb # <- numba jit\n...\n@nb.njit(nb.float64[:, :, :](nb.float64[:, :, :], nb.int8), parallel=True, cache=True) # <- decorator\ndef get_lratios_jit(x: np.ndarray, nmom: int = 5) -> np.ndarray:\n    ...\n```\n\n注意到使用了`@njit`函数装饰器，装饰器的参数里给出了输入输出数组的数据类型，以及`parallel=True`，`cache=True`等几个选项。他们的意义分别是开启自动循环并行化和编译缓存。这里将仅解释循环并行化，也可以看官方对循环自动并行化的[解释](https://numba.pydata.org/numba-doc/latest/user/parallel.html)。\n\n#### 循环并行化\n\n假设代码在一个多CPU系统上运行，对于类似下文给出的没有交叉迭代以来关系的循环，\n\n```python\n@njit(parallel=True)\ndef test(x):\n    n = x.shape[0]\n    a = np.sin(x)\n    b = np.cos(a * a)\n    acc = 0\n    for i in prange(n - 2):\n        for j in prange(n - 1):\n            acc += b[i] + b[j + 1]\n    return acc\n```\n\n`numba`会自动将循环分配到CPU的多个核心上以增加并行度。\n\n## 后记\n\n文中的完整代码已放于Github仓库[pylm-spei](https://github.com/zyzh2002/pylm-spei)。要在正态化的步骤执行加速，可以参考[numba-stats](https://pypi.org/project/numba-stats/)。\n","source":"_posts/SPEI计算的原理与算法优化.md","raw":"---\ntitle: SPEI计算的原理与算法优化\ndate: 2024-04-15 20:29:44\ncategories: 实用技术\ntags:\ntoc: true\n---\n\n## 什么是SPEI\n\n标准化降水蒸散指数SPEI（Standardized Precipitation Evapotranspiration Index）可以表征干湿状态。\nSPEI值越大越湿润，越小越干旱，其最早由Sergio M. Vicente-Serrano等人[提出](http://www.ipe.csic.es/vicente-serrano-s.m.)。\n\n<!-- more -->\n\n## SPEI算法\n\n### 构建差值序列\n\n首先构建降水量$P_i$和潜在蒸散发$PET_i$的差值序列$D_i$，\n\n$$ D_i = P_i-PET_i $$\n\n可以选定不同的时间尺度来计算SPEI。时间尺度为$k$，$i$日的$D_i$累计为该日前$k$天的$D_i$之和，也就是说，对于每个$k$尺度的$D_i$，其为前$k$天的滑动窗口和。\n\n### 对差值序列进行拟合\n\n目前常见的SPEI拟合方法均为使用三参数Log-Logistic分布（也称Fisk分布）对$D_i$进行拟合。近几年的研究显示，Genextreme分布对SPEI有[更好的拟合效果](https://onlinelibrary.wiley.com/doi/abs/10.1002/joc.6081)。\n\nPython在GIS系统中有其重要的生态位，但是使用Python对SPEI进行计算十分低效。传统方法中，若使用`Scipy`和循环进行Fisk分布的参数估计，计算大型数据集将十分困难，考虑如下代码：\n\n```python\nimport numpy as np\n\ndef calc_spei_fisk_paras(d_i_matrix:np.ndarray) -> np.ndarray:\n    from scipy.stats import fisk\n\n    d_i_shape = d_i_matrix.shape # d_i_matrix is the numpy array with the shape (time,x,y)\n\n    paras = np.zeros_like(d_i_shape)[0:3,:,:] # Storage fisk distribution paras\n\n    for i in d_i_shape[1]:\n        for j in d_i_shape[2]:\n            paras[:,i,j] = fisk.fit(d_i_matrix[:,i,j])\n\n    return paras\n```\n\n该函数使用二重嵌套循环对SPEI进行计算，因为Python的特性，该段代码的执行将极度缓慢，面对高分辨率图象时尤其明显。要对该算法进行优化，有以下几个方向：\n\n* 循环向量化\n* 寻找新的参数估计模式\n* jit编译\n\n### 概率值正态化\n\n序列值代入已估计参数的Genextreme分布得到概率值$P_i$；之后将概率值代入标准正态分布累积分布函数的反函数，得到SPEI值：\n\n$$ \\mathrm{SPEI}_i = \\Phi^{-1}(P_i) $$\n***\n\n## 算法优化\n\n### 循环向量化\n\n循环向量化指将使用循环进行的操作改为操作向量，C语言在编译时编译器会自动地将循环优化成处理器支持的SIMD指令。\n> SIMD(Single Instruction Multiple Data)即单指令流多数据流，是一种采用一个控制器来控制多个处理器，同时对一组数据（又称“数据向量”）中的每一个分别执行相同的操作从而实现空间上的并行性的技术。\n\n考虑以下C代码，\n\n```C\n/*\nsimd.c\nTest the simd optimization support for gcc\n */\n#include <stdio.h>\n#define LENGTH(array) (sizeof(array) / sizeof(array[0]))\n\nint main(){\n    int vec1 [3];\n    int vec2 [3];\n    printf(\"Input the First Vec:\\n\");\n    scanf(\"%d%d%d\",&vec1[0],&vec1[1],&vec1[2]);\n    printf(\"Input the Secound Vec:\\n\");\n    scanf(\"%d%d%d\",&vec2[0],&vec2[1],&vec2[2]);\n\n    int vec3[3];\n\n    for(int i = 0;i<LENGTH(vec1);i++){\n        vec3[i] = vec1[i]+vec2[i];\n    }\n\n    printf(\"Sum Vector is %d %d %d\\n\",vec3[0],vec3[1],vec3[2]);\n\n    return 0;\n}\n```\n\n该程序将两个`int`类型的变量使用循环相加。在AMD64机器上使用gcc的`-O1`和`-O3`优化选项分别编译得到汇编文件：\n\n```console\ngcc simd.c -S -o simd_O1.S -O1 -v\n\ngcc simd.c -S -o simd_O3.S -O3 -v\n```\n\n我们只关注`scanf`调用和`printf`调用之间的部分，汇编文件分别为：\n\n```nasm\n# simd_O1.S\ncall    __isoc99_scanf\nmovl    16(%rsp), %ecx\naddl    28(%rsp), %ecx\nmovl    12(%rsp), %edx\naddl    24(%rsp), %edx\nmovl    8(%rsp), %esi\naddl    20(%rsp), %esi\nmovl    $.LC3, %edi\nmovl    $0, %eax\ncall    printf\n```\n\n```nasm\n# simd_O3.S\ncall    __isoc99_scanf\nmovl    24(%rsp), %ecx\nmovl    $.LC3, %edi\nxorl    %eax, %eax\nmovq    (%rsp), %xmm0\nmovq    16(%rsp), %xmm1\naddl    8(%rsp), %ecx\npaddd   %xmm1, %xmm0\npextrd  $1, %xmm0, %edx\nmovd    %xmm0, %esi\ncall    printf\n```\n\n在没有使用优化的情况下，程序使用了3条`addl`指令，而优化过后其使用了`xmm`寄存器（SSE指令集）提升了计算效率。但Python解释器没有内建的SIMD支持，要解决这种问题可以使用`numpy`包：\n\n```python\nimport numpy as np\nimport timeit\n\ndef sum_numpy(a:np.ndarray, b:np.ndarray) -> np.ndarray:\n    return np.sum(a + b)\n\n\ndef sum_circulate(a:np.ndarray, b:np.ndarray) -> np.ndarray:\n    n = len(a)\n    c = np.zeros(n)\n    for i in range(n):\n        c[i] = a[i] + b[i]\n    return np.sum(c)\n\n\na = np.random.rand(10000)\nb = np.random.rand(10000)\n\nprint(timeit.timeit(lambda: sum_numpy(a, b), number=100))\nprint(timeit.timeit(lambda: sum_circulate(a, b), number=100))\n```\n\n输出结果不难预测，\n\n```console\n0.004135900000619586\n0.6949793999992835\n```\n\n`numpy`版本的向量加法比循环版本快了170多倍。如果我们以数组规模和所用时间作图，我们得到以下结果：\n\n![时间比较](graph1.png)\n\n问题规模越大，SIMD带来的加速效果越明显。但是`scipy`中的参数估计方法无法实现循环向量化，一次只能处理一个时间序列；而且修改`scipy`中的代码的成本又太高（大部分代码均由C语言写成），所以需要找新的参数估计模式。\n\n### Genextreme分布与L-moments\n\nGenextreme分布是[相对更好的SPEI拟合的候选分布](https://doi.org/10.1002/joc.6081)。其参数估计可以简单的使用L-moments[估计得到](https://ascelibrary.org/doi/10.1061/%28ASCE%291084-0699%282007%2912%3A6%28682%29)。\n\n使用L-moments的参数估计过程可以由以下公式给出：\n\nGEV分布的CDF为\n\n\\\\begin{equation}\nF(x)=\\\\left\\\\{\n    \\\\begin{aligned}\n    \\\\mathrm{exp}(-(1-\\\\kappa\\\\frac{x-\\\\xi}{\\\\alpha})^{1/\\\\kappa}),\\\\kappa\\\\not= 0 \\\\\\\\\n    \\\\mathrm{exp}(\\\\mathrm{exp}(-\\\\frac{x-\\\\xi}{\\\\alpha})),\\\\kappa = 0\n    \\\\end{aligned}\n\\\\right.\n\\\\end{equation}\n\n其中$\\alpha,\\xi,\\kappa$为参数。\n\n记L-mean，L-scale，L-skewness分别为$\\lambda_1,\\lambda_2,\\tau_3$，GEV分布的三个参数可以用如下公式近似估计：\n\n\\\\begin{equation}\n\\\\kappa =\\\\left\\\\{\n    \\\\begin{aligned}\n    &0.488138(\\\\tau_3)^{1.70839}-1.7631(\\\\tau_3)^{0.981824}+0.285706, 0.01\\\\le\\\\tau_3\\\\le 0.5 \\\\\\\\\n    &0.483706(\\\\tau_3)^{1.679096}-1.73786(\\\\tau_3)^{1.008948}+0.255108, 0.5\\\\le\\\\tau_3\\\\le 0.95\n    \\\\end{aligned}\n\\\\right.\n\\\\end{equation}\n\n\\\\begin{equation}\n\\\\frac{\\\\alpha}{\\\\lambda_2}=\\\\left\\\\{\n    \\\\begin{aligned}\n    &1.023602813(\\\\tau_3)^{1.8850974}-2.95087636(\\\\tau_3)^{1.195591244}+1.7599614982, -0.5\\\\le \\\\kappa \\\\le 0.3 \\\\\\\\\n    &1.5954866(\\\\tau_3)^{1.5816175}-3.886135(\\\\tau_3)^{0.89522}+2.310643, \\\\kappa > 0.3\n    \\\\end{aligned}\n\\\\right.\n\\\\end{equation}\n\n\\\\begin{equation}\n\\\\frac{\\\\xi-\\\\lambda_1}{\\\\lambda_2}=-0.0937(\\\\tau_3)^4-0.2198(\\\\tau_3)^3+1.407(\\\\tau_3)^2-1.4825(\\\\tau_3)-0.6205, 0.01\\\\le\\\\tau_3\\\\le 0.95\n\\\\end{equation}\n\n线性矩$\\lambda_1,\\lambda_2,\\tau_3$可以使用`lmoments3`包中的代码修改而来。`lmoments3`包中的线性矩计算方法可以简单的进行修改，以实现循环向量化：\n\n```python\n# Here are just a few of the key codes\nimport numpy as np\nimport numba as nb # numba jit, which will be introduced next\n...\n@nb.njit(nb.float64[:, :, :](nb.float64[:, :, :], nb.int8), parallel=True, cache=True)\ndef get_lratios_jit(x: np.ndarray, nmom: int = 5) -> np.ndarray:\n    \"\"\"\n    Calculates L-moments (up to the specified order) of an array of data using Numba JIT compilation.\n\n    Args:\n        x (np.ndarray): A 3D array of data.\n        nmom (int, optional): The order of L-moments to compute (default is 5).\n\n    Returns:\n        np.ndarray: An array containing L-moments up to the specified order.\n    \"\"\"\n    def sort_array_with_axis(x: np.ndarray, axis: int) -> np.ndarray:\n        \"\"\"\n        Sorts the input array along the specified axis.\n\n        Args:\n            x (np.ndarray): Input array.\n            axis (int): Axis along which to sort.\n\n        Returns:\n            np.ndarray: Sorted array.\n        \"\"\"\n        for i in nb.prange(x.shape[axis]):\n            x[i] = np.sort(x[i])\n        return x\n\n    x = np.asarray(x, dtype=np.float64)\n    n = x.shape[0]\n\n    x = sort_array_with_axis(x, 0)\n\n    sum_xtrans = np.empty_like(x[0])\n\n    def comb(n, r):\n        \"\"\"\n        Computes the binomial coefficient (n choose r).\n\n        Args:\n            n (int): Total number of items.\n            r (int): Number of items to choose.\n\n        Returns:\n            int: Binomial coefficient.\n        \"\"\"\n        if r < 0 or r > n:\n            return 0\n        if r == 0 or r == n:\n            return 1\n        c = 1\n        for i in range(1, r + 1):\n            c = c * (n - i + 1) // i\n        return c\n\n    # First L-moment\n\n    l1 = np.sum(x, axis=0) / comb(n, 1)\n\n    if nmom == 1:\n        return np.expand_dims(l1, axis=0)\n\n    # Second L-moment\n\n    comb1 = np.arange(n)\n    coefl2 = 0.5 / comb(n, 2)\n    sum_xtrans[:] = 0\n    for i in nb.prange(n):\n        sum_xtrans += (comb1[i] - comb1[n - 1 - i]) * x[i]\n    l2 = coefl2 * sum_xtrans\n\n    if nmom == 2:\n        return np.stack((l1, l2))\n\n    # Third L-moment\n\n    comb3 = np.zeros(n)\n    for i in range(n):\n        comb3[i] = comb(i, 2)\n    coefl3 = 1.0 / 3.0 / comb(n, 3)\n    sum_xtrans[:] = 0\n    for i in nb.prange(n):\n        sum_xtrans += (\n            comb3[i] - 2 * comb1[i] * comb1[n - 1 - i] + comb3[n - 1 - i]\n        ) * x[i]\n    l3 = coefl3 * sum_xtrans / l2\n\n    if nmom == 3:\n        return np.stack((l1, l2, l3))\n...\n```\n\n由以上示例代码能计算出$\\lambda_1,\\lambda_2,\\tau_3$， 便可以由参数估计的公式给出参数值，进而描述Genextreme分布\n\n### jit编译\n\njit 的全称是 Just-in-time，在我们使用的`numba`库里面则特指Just-in-time Compilation（即时编译）。因为Python的动态类型带来的低效率，需要使用jit技术加速python代码的运行。在代码第一次被执行时将被编译为高效的机器码，同时也能由编译器执行相应的编译优化，以提高执行效率。但是，`numba`并不是对所有的Python代码都有优化效果，使用前需要去`numba`[的官方文档](https://numba.readthedocs.io/en/stable/reference/pysupported.html)查看他支持的python功能和`numpy`功能。\n\n在上一节中给出的代码就包含了`numba`包，\n\n```python\nimport numpy as np\nimport numba as nb # <- numba jit\n...\n@nb.njit(nb.float64[:, :, :](nb.float64[:, :, :], nb.int8), parallel=True, cache=True) # <- decorator\ndef get_lratios_jit(x: np.ndarray, nmom: int = 5) -> np.ndarray:\n    ...\n```\n\n注意到使用了`@njit`函数装饰器，装饰器的参数里给出了输入输出数组的数据类型，以及`parallel=True`，`cache=True`等几个选项。他们的意义分别是开启自动循环并行化和编译缓存。这里将仅解释循环并行化，也可以看官方对循环自动并行化的[解释](https://numba.pydata.org/numba-doc/latest/user/parallel.html)。\n\n#### 循环并行化\n\n假设代码在一个多CPU系统上运行，对于类似下文给出的没有交叉迭代以来关系的循环，\n\n```python\n@njit(parallel=True)\ndef test(x):\n    n = x.shape[0]\n    a = np.sin(x)\n    b = np.cos(a * a)\n    acc = 0\n    for i in prange(n - 2):\n        for j in prange(n - 1):\n            acc += b[i] + b[j + 1]\n    return acc\n```\n\n`numba`会自动将循环分配到CPU的多个核心上以增加并行度。\n\n## 后记\n\n文中的完整代码已放于Github仓库[pylm-spei](https://github.com/zyzh2002/pylm-spei)。要在正态化的步骤执行加速，可以参考[numba-stats](https://pypi.org/project/numba-stats/)。\n","slug":"SPEI计算的原理与算法优化","published":1,"updated":"2025-01-28T02:30:43.923Z","_id":"cm6f6vz5z000084vbc6lyagbk","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"什么是SPEI\"><a href=\"#什么是SPEI\" class=\"headerlink\" title=\"什么是SPEI\"></a>什么是SPEI</h2><p>标准化降水蒸散指数SPEI（Standardized Precipitation Evapotranspiration Index）可以表征干湿状态。<br>SPEI值越大越湿润，越小越干旱，其最早由Sergio M. Vicente-Serrano等人<a href=\"http://www.ipe.csic.es/vicente-serrano-s.m.\">提出</a>。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"SPEI算法\"><a href=\"#SPEI算法\" class=\"headerlink\" title=\"SPEI算法\"></a>SPEI算法</h2><h3 id=\"构建差值序列\"><a href=\"#构建差值序列\" class=\"headerlink\" title=\"构建差值序列\"></a>构建差值序列</h3><p>首先构建降水量$P_i$和潜在蒸散发$PET_i$的差值序列$D_i$，</p>\n<p>$$ D_i &#x3D; P_i-PET_i $$</p>\n<p>可以选定不同的时间尺度来计算SPEI。时间尺度为$k$，$i$日的$D_i$累计为该日前$k$天的$D_i$之和，也就是说，对于每个$k$尺度的$D_i$，其为前$k$天的滑动窗口和。</p>\n<h3 id=\"对差值序列进行拟合\"><a href=\"#对差值序列进行拟合\" class=\"headerlink\" title=\"对差值序列进行拟合\"></a>对差值序列进行拟合</h3><p>目前常见的SPEI拟合方法均为使用三参数Log-Logistic分布（也称Fisk分布）对$D_i$进行拟合。近几年的研究显示，Genextreme分布对SPEI有<a href=\"https://onlinelibrary.wiley.com/doi/abs/10.1002/joc.6081\">更好的拟合效果</a>。</p>\n<p>Python在GIS系统中有其重要的生态位，但是使用Python对SPEI进行计算十分低效。传统方法中，若使用<code>Scipy</code>和循环进行Fisk分布的参数估计，计算大型数据集将十分困难，考虑如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calc_spei_fisk_paras</span>(<span class=\"params\">d_i_matrix:np.ndarray</span>) -&gt; np.ndarray:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> scipy.stats <span class=\"keyword\">import</span> fisk</span><br><span class=\"line\"></span><br><span class=\"line\">    d_i_shape = d_i_matrix.shape <span class=\"comment\"># d_i_matrix is the numpy array with the shape (time,x,y)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    paras = np.zeros_like(d_i_shape)[<span class=\"number\">0</span>:<span class=\"number\">3</span>,:,:] <span class=\"comment\"># Storage fisk distribution paras</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> d_i_shape[<span class=\"number\">1</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> d_i_shape[<span class=\"number\">2</span>]:</span><br><span class=\"line\">            paras[:,i,j] = fisk.fit(d_i_matrix[:,i,j])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> paras</span><br></pre></td></tr></table></figure>\n\n<p>该函数使用二重嵌套循环对SPEI进行计算，因为Python的特性，该段代码的执行将极度缓慢，面对高分辨率图象时尤其明显。要对该算法进行优化，有以下几个方向：</p>\n<ul>\n<li>循环向量化</li>\n<li>寻找新的参数估计模式</li>\n<li>jit编译</li>\n</ul>\n<h3 id=\"概率值正态化\"><a href=\"#概率值正态化\" class=\"headerlink\" title=\"概率值正态化\"></a>概率值正态化</h3><p>序列值代入已估计参数的Genextreme分布得到概率值$P_i$；之后将概率值代入标准正态分布累积分布函数的反函数，得到SPEI值：</p>\n<p>$$ \\mathrm{SPEI}_i &#x3D; \\Phi^{-1}(P_i) $$</p>\n<hr>\n<h2 id=\"算法优化\"><a href=\"#算法优化\" class=\"headerlink\" title=\"算法优化\"></a>算法优化</h2><h3 id=\"循环向量化\"><a href=\"#循环向量化\" class=\"headerlink\" title=\"循环向量化\"></a>循环向量化</h3><p>循环向量化指将使用循环进行的操作改为操作向量，C语言在编译时编译器会自动地将循环优化成处理器支持的SIMD指令。</p>\n<blockquote>\n<p>SIMD(Single Instruction Multiple Data)即单指令流多数据流，是一种采用一个控制器来控制多个处理器，同时对一组数据（又称“数据向量”）中的每一个分别执行相同的操作从而实现空间上的并行性的技术。</p>\n</blockquote>\n<p>考虑以下C代码，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">simd.c</span></span><br><span class=\"line\"><span class=\"comment\">Test the simd optimization support for gcc</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LENGTH(array) (sizeof(array) / sizeof(array[0]))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> vec1 [<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> vec2 [<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Input the First Vec:\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;vec1[<span class=\"number\">0</span>],&amp;vec1[<span class=\"number\">1</span>],&amp;vec1[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Input the Secound Vec:\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;vec2[<span class=\"number\">0</span>],&amp;vec2[<span class=\"number\">1</span>],&amp;vec2[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> vec3[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i&lt;LENGTH(vec1);i++)&#123;</span><br><span class=\"line\">        vec3[i] = vec1[i]+vec2[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Sum Vector is %d %d %d\\n&quot;</span>,vec3[<span class=\"number\">0</span>],vec3[<span class=\"number\">1</span>],vec3[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该程序将两个<code>int</code>类型的变量使用循环相加。在AMD64机器上使用gcc的<code>-O1</code>和<code>-O3</code>优化选项分别编译得到汇编文件：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc simd.c -S -o simd_O1.S -O1 -v</span><br><span class=\"line\"></span><br><span class=\"line\">gcc simd.c -S -o simd_O3.S -O3 -v</span><br></pre></td></tr></table></figure>\n\n<p>我们只关注<code>scanf</code>调用和<code>printf</code>调用之间的部分，汇编文件分别为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># simd_O1.S</span><br><span class=\"line\">call    __isoc99_scanf</span><br><span class=\"line\">movl    16(%rsp), %ecx</span><br><span class=\"line\">addl    28(%rsp), %ecx</span><br><span class=\"line\">movl    12(%rsp), %edx</span><br><span class=\"line\">addl    24(%rsp), %edx</span><br><span class=\"line\">movl    8(%rsp), %esi</span><br><span class=\"line\">addl    20(%rsp), %esi</span><br><span class=\"line\">movl    $.LC3, %edi</span><br><span class=\"line\">movl    $0, %eax</span><br><span class=\"line\">call    printf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># simd_O3.S</span><br><span class=\"line\">call    __isoc99_scanf</span><br><span class=\"line\">movl    24(%rsp), %ecx</span><br><span class=\"line\">movl    $.LC3, %edi</span><br><span class=\"line\">xorl    %eax, %eax</span><br><span class=\"line\">movq    (%rsp), %xmm0</span><br><span class=\"line\">movq    16(%rsp), %xmm1</span><br><span class=\"line\">addl    8(%rsp), %ecx</span><br><span class=\"line\">paddd   %xmm1, %xmm0</span><br><span class=\"line\">pextrd  $1, %xmm0, %edx</span><br><span class=\"line\">movd    %xmm0, %esi</span><br><span class=\"line\">call    printf</span><br></pre></td></tr></table></figure>\n\n<p>在没有使用优化的情况下，程序使用了3条<code>addl</code>指令，而优化过后其使用了<code>xmm</code>寄存器（SSE指令集）提升了计算效率。但Python解释器没有内建的SIMD支持，要解决这种问题可以使用<code>numpy</code>包：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> timeit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum_numpy</span>(<span class=\"params\">a:np.ndarray, b:np.ndarray</span>) -&gt; np.ndarray:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.<span class=\"built_in\">sum</span>(a + b)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum_circulate</span>(<span class=\"params\">a:np.ndarray, b:np.ndarray</span>) -&gt; np.ndarray:</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(a)</span><br><span class=\"line\">    c = np.zeros(n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        c[i] = a[i] + b[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.<span class=\"built_in\">sum</span>(c)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.random.rand(<span class=\"number\">10000</span>)</span><br><span class=\"line\">b = np.random.rand(<span class=\"number\">10000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(timeit.timeit(<span class=\"keyword\">lambda</span>: sum_numpy(a, b), number=<span class=\"number\">100</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(timeit.timeit(<span class=\"keyword\">lambda</span>: sum_circulate(a, b), number=<span class=\"number\">100</span>))</span><br></pre></td></tr></table></figure>\n\n<p>输出结果不难预测，</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.004135900000619586</span><br><span class=\"line\">0.6949793999992835</span><br></pre></td></tr></table></figure>\n\n<p><code>numpy</code>版本的向量加法比循环版本快了170多倍。如果我们以数组规模和所用时间作图，我们得到以下结果：</p>\n<p><img src=\"/2024/04/15/SPEI%E8%AE%A1%E7%AE%97%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96/graph1.png\" alt=\"时间比较\"></p>\n<p>问题规模越大，SIMD带来的加速效果越明显。但是<code>scipy</code>中的参数估计方法无法实现循环向量化，一次只能处理一个时间序列；而且修改<code>scipy</code>中的代码的成本又太高（大部分代码均由C语言写成），所以需要找新的参数估计模式。</p>\n<h3 id=\"Genextreme分布与L-moments\"><a href=\"#Genextreme分布与L-moments\" class=\"headerlink\" title=\"Genextreme分布与L-moments\"></a>Genextreme分布与L-moments</h3><p>Genextreme分布是<a href=\"https://doi.org/10.1002/joc.6081\">相对更好的SPEI拟合的候选分布</a>。其参数估计可以简单的使用L-moments<a href=\"https://ascelibrary.org/doi/10.1061/%28ASCE%291084-0699%282007%2912%3A6%28682%29\">估计得到</a>。</p>\n<p>使用L-moments的参数估计过程可以由以下公式给出：</p>\n<p>GEV分布的CDF为</p>\n<p>\\begin{equation}<br>F(x)&#x3D;\\left\\{<br>    \\begin{aligned}<br>    \\mathrm{exp}(-(1-\\kappa\\frac{x-\\xi}{\\alpha})^{1&#x2F;\\kappa}),\\kappa\\not&#x3D; 0 \\\\<br>    \\mathrm{exp}(\\mathrm{exp}(-\\frac{x-\\xi}{\\alpha})),\\kappa &#x3D; 0<br>    \\end{aligned}<br>\\right.<br>\\end{equation}</p>\n<p>其中$\\alpha,\\xi,\\kappa$为参数。</p>\n<p>记L-mean，L-scale，L-skewness分别为$\\lambda_1,\\lambda_2,\\tau_3$，GEV分布的三个参数可以用如下公式近似估计：</p>\n<p>\\begin{equation}<br>\\kappa &#x3D;\\left\\{<br>    \\begin{aligned}<br>    &amp;0.488138(\\tau_3)^{1.70839}-1.7631(\\tau_3)^{0.981824}+0.285706, 0.01\\le\\tau_3\\le 0.5 \\\\<br>    &amp;0.483706(\\tau_3)^{1.679096}-1.73786(\\tau_3)^{1.008948}+0.255108, 0.5\\le\\tau_3\\le 0.95<br>    \\end{aligned}<br>\\right.<br>\\end{equation}</p>\n<p>\\begin{equation}<br>\\frac{\\alpha}{\\lambda_2}&#x3D;\\left\\{<br>    \\begin{aligned}<br>    &amp;1.023602813(\\tau_3)^{1.8850974}-2.95087636(\\tau_3)^{1.195591244}+1.7599614982, -0.5\\le \\kappa \\le 0.3 \\\\<br>    &amp;1.5954866(\\tau_3)^{1.5816175}-3.886135(\\tau_3)^{0.89522}+2.310643, \\kappa &gt; 0.3<br>    \\end{aligned}<br>\\right.<br>\\end{equation}</p>\n<p>\\begin{equation}<br>\\frac{\\xi-\\lambda_1}{\\lambda_2}&#x3D;-0.0937(\\tau_3)^4-0.2198(\\tau_3)^3+1.407(\\tau_3)^2-1.4825(\\tau_3)-0.6205, 0.01\\le\\tau_3\\le 0.95<br>\\end{equation}</p>\n<p>线性矩$\\lambda_1,\\lambda_2,\\tau_3$可以使用<code>lmoments3</code>包中的代码修改而来。<code>lmoments3</code>包中的线性矩计算方法可以简单的进行修改，以实现循环向量化：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Here are just a few of the key codes</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> numba <span class=\"keyword\">as</span> nb <span class=\"comment\"># numba jit, which will be introduced next</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@nb.njit(<span class=\"params\">nb.float64[:, :, :](<span class=\"params\">nb.float64[:, :, :], nb.int8</span>), parallel=<span class=\"literal\">True</span>, cache=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_lratios_jit</span>(<span class=\"params\">x: np.ndarray, nmom: <span class=\"built_in\">int</span> = <span class=\"number\">5</span></span>) -&gt; np.ndarray:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Calculates L-moments (up to the specified order) of an array of data using Numba JIT compilation.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        x (np.ndarray): A 3D array of data.</span></span><br><span class=\"line\"><span class=\"string\">        nmom (int, optional): The order of L-moments to compute (default is 5).</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Returns:</span></span><br><span class=\"line\"><span class=\"string\">        np.ndarray: An array containing L-moments up to the specified order.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sort_array_with_axis</span>(<span class=\"params\">x: np.ndarray, axis: <span class=\"built_in\">int</span></span>) -&gt; np.ndarray:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Sorts the input array along the specified axis.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Args:</span></span><br><span class=\"line\"><span class=\"string\">            x (np.ndarray): Input array.</span></span><br><span class=\"line\"><span class=\"string\">            axis (int): Axis along which to sort.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Returns:</span></span><br><span class=\"line\"><span class=\"string\">            np.ndarray: Sorted array.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nb.prange(x.shape[axis]):</span><br><span class=\"line\">            x[i] = np.sort(x[i])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    x = np.asarray(x, dtype=np.float64)</span><br><span class=\"line\">    n = x.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    x = sort_array_with_axis(x, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    sum_xtrans = np.empty_like(x[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">comb</span>(<span class=\"params\">n, r</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Computes the binomial coefficient (n choose r).</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Args:</span></span><br><span class=\"line\"><span class=\"string\">            n (int): Total number of items.</span></span><br><span class=\"line\"><span class=\"string\">            r (int): Number of items to choose.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Returns:</span></span><br><span class=\"line\"><span class=\"string\">            int: Binomial coefficient.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> r &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> r &gt; n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> r == <span class=\"number\">0</span> <span class=\"keyword\">or</span> r == n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        c = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, r + <span class=\"number\">1</span>):</span><br><span class=\"line\">            c = c * (n - i + <span class=\"number\">1</span>) // i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># First L-moment</span></span><br><span class=\"line\"></span><br><span class=\"line\">    l1 = np.<span class=\"built_in\">sum</span>(x, axis=<span class=\"number\">0</span>) / comb(n, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> nmom == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.expand_dims(l1, axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Second L-moment</span></span><br><span class=\"line\"></span><br><span class=\"line\">    comb1 = np.arange(n)</span><br><span class=\"line\">    coefl2 = <span class=\"number\">0.5</span> / comb(n, <span class=\"number\">2</span>)</span><br><span class=\"line\">    sum_xtrans[:] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nb.prange(n):</span><br><span class=\"line\">        sum_xtrans += (comb1[i] - comb1[n - <span class=\"number\">1</span> - i]) * x[i]</span><br><span class=\"line\">    l2 = coefl2 * sum_xtrans</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> nmom == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.stack((l1, l2))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Third L-moment</span></span><br><span class=\"line\"></span><br><span class=\"line\">    comb3 = np.zeros(n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        comb3[i] = comb(i, <span class=\"number\">2</span>)</span><br><span class=\"line\">    coefl3 = <span class=\"number\">1.0</span> / <span class=\"number\">3.0</span> / comb(n, <span class=\"number\">3</span>)</span><br><span class=\"line\">    sum_xtrans[:] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nb.prange(n):</span><br><span class=\"line\">        sum_xtrans += (</span><br><span class=\"line\">            comb3[i] - <span class=\"number\">2</span> * comb1[i] * comb1[n - <span class=\"number\">1</span> - i] + comb3[n - <span class=\"number\">1</span> - i]</span><br><span class=\"line\">        ) * x[i]</span><br><span class=\"line\">    l3 = coefl3 * sum_xtrans / l2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> nmom == <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.stack((l1, l2, l3))</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>由以上示例代码能计算出$\\lambda_1,\\lambda_2,\\tau_3$， 便可以由参数估计的公式给出参数值，进而描述Genextreme分布</p>\n<h3 id=\"jit编译\"><a href=\"#jit编译\" class=\"headerlink\" title=\"jit编译\"></a>jit编译</h3><p>jit 的全称是 Just-in-time，在我们使用的<code>numba</code>库里面则特指Just-in-time Compilation（即时编译）。因为Python的动态类型带来的低效率，需要使用jit技术加速python代码的运行。在代码第一次被执行时将被编译为高效的机器码，同时也能由编译器执行相应的编译优化，以提高执行效率。但是，<code>numba</code>并不是对所有的Python代码都有优化效果，使用前需要去<code>numba</code><a href=\"https://numba.readthedocs.io/en/stable/reference/pysupported.html\">的官方文档</a>查看他支持的python功能和<code>numpy</code>功能。</p>\n<p>在上一节中给出的代码就包含了<code>numba</code>包，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> numba <span class=\"keyword\">as</span> nb <span class=\"comment\"># &lt;- numba jit</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@nb.njit(<span class=\"params\">nb.float64[:, :, :](<span class=\"params\">nb.float64[:, :, :], nb.int8</span>), parallel=<span class=\"literal\">True</span>, cache=<span class=\"literal\">True</span></span>) </span><span class=\"comment\"># &lt;- decorator</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_lratios_jit</span>(<span class=\"params\">x: np.ndarray, nmom: <span class=\"built_in\">int</span> = <span class=\"number\">5</span></span>) -&gt; np.ndarray:</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>注意到使用了<code>@njit</code>函数装饰器，装饰器的参数里给出了输入输出数组的数据类型，以及<code>parallel=True</code>，<code>cache=True</code>等几个选项。他们的意义分别是开启自动循环并行化和编译缓存。这里将仅解释循环并行化，也可以看官方对循环自动并行化的<a href=\"https://numba.pydata.org/numba-doc/latest/user/parallel.html\">解释</a>。</p>\n<h4 id=\"循环并行化\"><a href=\"#循环并行化\" class=\"headerlink\" title=\"循环并行化\"></a>循环并行化</h4><p>假设代码在一个多CPU系统上运行，对于类似下文给出的没有交叉迭代以来关系的循环，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@njit(<span class=\"params\">parallel=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    n = x.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    a = np.sin(x)</span><br><span class=\"line\">    b = np.cos(a * a)</span><br><span class=\"line\">    acc = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prange(n - <span class=\"number\">2</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> prange(n - <span class=\"number\">1</span>):</span><br><span class=\"line\">            acc += b[i] + b[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc</span><br></pre></td></tr></table></figure>\n\n<p><code>numba</code>会自动将循环分配到CPU的多个核心上以增加并行度。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>文中的完整代码已放于Github仓库<a href=\"https://github.com/zyzh2002/pylm-spei\">pylm-spei</a>。要在正态化的步骤执行加速，可以参考<a href=\"https://pypi.org/project/numba-stats/\">numba-stats</a>。</p>\n","excerpt":"<h2 id=\"什么是SPEI\"><a href=\"#什么是SPEI\" class=\"headerlink\" title=\"什么是SPEI\"></a>什么是SPEI</h2><p>标准化降水蒸散指数SPEI（Standardized Precipitation Evapotranspiration Index）可以表征干湿状态。<br>SPEI值越大越湿润，越小越干旱，其最早由Sergio M. Vicente-Serrano等人<a href=\"http://www.ipe.csic.es/vicente-serrano-s.m.\">提出</a>。</p>","more":"<h2 id=\"SPEI算法\"><a href=\"#SPEI算法\" class=\"headerlink\" title=\"SPEI算法\"></a>SPEI算法</h2><h3 id=\"构建差值序列\"><a href=\"#构建差值序列\" class=\"headerlink\" title=\"构建差值序列\"></a>构建差值序列</h3><p>首先构建降水量$P_i$和潜在蒸散发$PET_i$的差值序列$D_i$，</p>\n<p>$$ D_i &#x3D; P_i-PET_i $$</p>\n<p>可以选定不同的时间尺度来计算SPEI。时间尺度为$k$，$i$日的$D_i$累计为该日前$k$天的$D_i$之和，也就是说，对于每个$k$尺度的$D_i$，其为前$k$天的滑动窗口和。</p>\n<h3 id=\"对差值序列进行拟合\"><a href=\"#对差值序列进行拟合\" class=\"headerlink\" title=\"对差值序列进行拟合\"></a>对差值序列进行拟合</h3><p>目前常见的SPEI拟合方法均为使用三参数Log-Logistic分布（也称Fisk分布）对$D_i$进行拟合。近几年的研究显示，Genextreme分布对SPEI有<a href=\"https://onlinelibrary.wiley.com/doi/abs/10.1002/joc.6081\">更好的拟合效果</a>。</p>\n<p>Python在GIS系统中有其重要的生态位，但是使用Python对SPEI进行计算十分低效。传统方法中，若使用<code>Scipy</code>和循环进行Fisk分布的参数估计，计算大型数据集将十分困难，考虑如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calc_spei_fisk_paras</span>(<span class=\"params\">d_i_matrix:np.ndarray</span>) -&gt; np.ndarray:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> scipy.stats <span class=\"keyword\">import</span> fisk</span><br><span class=\"line\"></span><br><span class=\"line\">    d_i_shape = d_i_matrix.shape <span class=\"comment\"># d_i_matrix is the numpy array with the shape (time,x,y)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    paras = np.zeros_like(d_i_shape)[<span class=\"number\">0</span>:<span class=\"number\">3</span>,:,:] <span class=\"comment\"># Storage fisk distribution paras</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> d_i_shape[<span class=\"number\">1</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> d_i_shape[<span class=\"number\">2</span>]:</span><br><span class=\"line\">            paras[:,i,j] = fisk.fit(d_i_matrix[:,i,j])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> paras</span><br></pre></td></tr></table></figure>\n\n<p>该函数使用二重嵌套循环对SPEI进行计算，因为Python的特性，该段代码的执行将极度缓慢，面对高分辨率图象时尤其明显。要对该算法进行优化，有以下几个方向：</p>\n<ul>\n<li>循环向量化</li>\n<li>寻找新的参数估计模式</li>\n<li>jit编译</li>\n</ul>\n<h3 id=\"概率值正态化\"><a href=\"#概率值正态化\" class=\"headerlink\" title=\"概率值正态化\"></a>概率值正态化</h3><p>序列值代入已估计参数的Genextreme分布得到概率值$P_i$；之后将概率值代入标准正态分布累积分布函数的反函数，得到SPEI值：</p>\n<p>$$ \\mathrm{SPEI}_i &#x3D; \\Phi^{-1}(P_i) $$</p>\n<hr>\n<h2 id=\"算法优化\"><a href=\"#算法优化\" class=\"headerlink\" title=\"算法优化\"></a>算法优化</h2><h3 id=\"循环向量化\"><a href=\"#循环向量化\" class=\"headerlink\" title=\"循环向量化\"></a>循环向量化</h3><p>循环向量化指将使用循环进行的操作改为操作向量，C语言在编译时编译器会自动地将循环优化成处理器支持的SIMD指令。</p>\n<blockquote>\n<p>SIMD(Single Instruction Multiple Data)即单指令流多数据流，是一种采用一个控制器来控制多个处理器，同时对一组数据（又称“数据向量”）中的每一个分别执行相同的操作从而实现空间上的并行性的技术。</p>\n</blockquote>\n<p>考虑以下C代码，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">simd.c</span></span><br><span class=\"line\"><span class=\"comment\">Test the simd optimization support for gcc</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LENGTH(array) (sizeof(array) / sizeof(array[0]))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> vec1 [<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> vec2 [<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Input the First Vec:\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;vec1[<span class=\"number\">0</span>],&amp;vec1[<span class=\"number\">1</span>],&amp;vec1[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Input the Secound Vec:\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;vec2[<span class=\"number\">0</span>],&amp;vec2[<span class=\"number\">1</span>],&amp;vec2[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> vec3[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i&lt;LENGTH(vec1);i++)&#123;</span><br><span class=\"line\">        vec3[i] = vec1[i]+vec2[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Sum Vector is %d %d %d\\n&quot;</span>,vec3[<span class=\"number\">0</span>],vec3[<span class=\"number\">1</span>],vec3[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该程序将两个<code>int</code>类型的变量使用循环相加。在AMD64机器上使用gcc的<code>-O1</code>和<code>-O3</code>优化选项分别编译得到汇编文件：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc simd.c -S -o simd_O1.S -O1 -v</span><br><span class=\"line\"></span><br><span class=\"line\">gcc simd.c -S -o simd_O3.S -O3 -v</span><br></pre></td></tr></table></figure>\n\n<p>我们只关注<code>scanf</code>调用和<code>printf</code>调用之间的部分，汇编文件分别为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># simd_O1.S</span><br><span class=\"line\">call    __isoc99_scanf</span><br><span class=\"line\">movl    16(%rsp), %ecx</span><br><span class=\"line\">addl    28(%rsp), %ecx</span><br><span class=\"line\">movl    12(%rsp), %edx</span><br><span class=\"line\">addl    24(%rsp), %edx</span><br><span class=\"line\">movl    8(%rsp), %esi</span><br><span class=\"line\">addl    20(%rsp), %esi</span><br><span class=\"line\">movl    $.LC3, %edi</span><br><span class=\"line\">movl    $0, %eax</span><br><span class=\"line\">call    printf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># simd_O3.S</span><br><span class=\"line\">call    __isoc99_scanf</span><br><span class=\"line\">movl    24(%rsp), %ecx</span><br><span class=\"line\">movl    $.LC3, %edi</span><br><span class=\"line\">xorl    %eax, %eax</span><br><span class=\"line\">movq    (%rsp), %xmm0</span><br><span class=\"line\">movq    16(%rsp), %xmm1</span><br><span class=\"line\">addl    8(%rsp), %ecx</span><br><span class=\"line\">paddd   %xmm1, %xmm0</span><br><span class=\"line\">pextrd  $1, %xmm0, %edx</span><br><span class=\"line\">movd    %xmm0, %esi</span><br><span class=\"line\">call    printf</span><br></pre></td></tr></table></figure>\n\n<p>在没有使用优化的情况下，程序使用了3条<code>addl</code>指令，而优化过后其使用了<code>xmm</code>寄存器（SSE指令集）提升了计算效率。但Python解释器没有内建的SIMD支持，要解决这种问题可以使用<code>numpy</code>包：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> timeit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum_numpy</span>(<span class=\"params\">a:np.ndarray, b:np.ndarray</span>) -&gt; np.ndarray:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.<span class=\"built_in\">sum</span>(a + b)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum_circulate</span>(<span class=\"params\">a:np.ndarray, b:np.ndarray</span>) -&gt; np.ndarray:</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(a)</span><br><span class=\"line\">    c = np.zeros(n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        c[i] = a[i] + b[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.<span class=\"built_in\">sum</span>(c)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.random.rand(<span class=\"number\">10000</span>)</span><br><span class=\"line\">b = np.random.rand(<span class=\"number\">10000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(timeit.timeit(<span class=\"keyword\">lambda</span>: sum_numpy(a, b), number=<span class=\"number\">100</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(timeit.timeit(<span class=\"keyword\">lambda</span>: sum_circulate(a, b), number=<span class=\"number\">100</span>))</span><br></pre></td></tr></table></figure>\n\n<p>输出结果不难预测，</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.004135900000619586</span><br><span class=\"line\">0.6949793999992835</span><br></pre></td></tr></table></figure>\n\n<p><code>numpy</code>版本的向量加法比循环版本快了170多倍。如果我们以数组规模和所用时间作图，我们得到以下结果：</p>\n<p><img src=\"/2024/04/15/SPEI%E8%AE%A1%E7%AE%97%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96/graph1.png\" alt=\"时间比较\"></p>\n<p>问题规模越大，SIMD带来的加速效果越明显。但是<code>scipy</code>中的参数估计方法无法实现循环向量化，一次只能处理一个时间序列；而且修改<code>scipy</code>中的代码的成本又太高（大部分代码均由C语言写成），所以需要找新的参数估计模式。</p>\n<h3 id=\"Genextreme分布与L-moments\"><a href=\"#Genextreme分布与L-moments\" class=\"headerlink\" title=\"Genextreme分布与L-moments\"></a>Genextreme分布与L-moments</h3><p>Genextreme分布是<a href=\"https://doi.org/10.1002/joc.6081\">相对更好的SPEI拟合的候选分布</a>。其参数估计可以简单的使用L-moments<a href=\"https://ascelibrary.org/doi/10.1061/%28ASCE%291084-0699%282007%2912%3A6%28682%29\">估计得到</a>。</p>\n<p>使用L-moments的参数估计过程可以由以下公式给出：</p>\n<p>GEV分布的CDF为</p>\n<p>\\begin{equation}<br>F(x)&#x3D;\\left\\{<br>    \\begin{aligned}<br>    \\mathrm{exp}(-(1-\\kappa\\frac{x-\\xi}{\\alpha})^{1&#x2F;\\kappa}),\\kappa\\not&#x3D; 0 \\\\<br>    \\mathrm{exp}(\\mathrm{exp}(-\\frac{x-\\xi}{\\alpha})),\\kappa &#x3D; 0<br>    \\end{aligned}<br>\\right.<br>\\end{equation}</p>\n<p>其中$\\alpha,\\xi,\\kappa$为参数。</p>\n<p>记L-mean，L-scale，L-skewness分别为$\\lambda_1,\\lambda_2,\\tau_3$，GEV分布的三个参数可以用如下公式近似估计：</p>\n<p>\\begin{equation}<br>\\kappa &#x3D;\\left\\{<br>    \\begin{aligned}<br>    &amp;0.488138(\\tau_3)^{1.70839}-1.7631(\\tau_3)^{0.981824}+0.285706, 0.01\\le\\tau_3\\le 0.5 \\\\<br>    &amp;0.483706(\\tau_3)^{1.679096}-1.73786(\\tau_3)^{1.008948}+0.255108, 0.5\\le\\tau_3\\le 0.95<br>    \\end{aligned}<br>\\right.<br>\\end{equation}</p>\n<p>\\begin{equation}<br>\\frac{\\alpha}{\\lambda_2}&#x3D;\\left\\{<br>    \\begin{aligned}<br>    &amp;1.023602813(\\tau_3)^{1.8850974}-2.95087636(\\tau_3)^{1.195591244}+1.7599614982, -0.5\\le \\kappa \\le 0.3 \\\\<br>    &amp;1.5954866(\\tau_3)^{1.5816175}-3.886135(\\tau_3)^{0.89522}+2.310643, \\kappa &gt; 0.3<br>    \\end{aligned}<br>\\right.<br>\\end{equation}</p>\n<p>\\begin{equation}<br>\\frac{\\xi-\\lambda_1}{\\lambda_2}&#x3D;-0.0937(\\tau_3)^4-0.2198(\\tau_3)^3+1.407(\\tau_3)^2-1.4825(\\tau_3)-0.6205, 0.01\\le\\tau_3\\le 0.95<br>\\end{equation}</p>\n<p>线性矩$\\lambda_1,\\lambda_2,\\tau_3$可以使用<code>lmoments3</code>包中的代码修改而来。<code>lmoments3</code>包中的线性矩计算方法可以简单的进行修改，以实现循环向量化：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Here are just a few of the key codes</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> numba <span class=\"keyword\">as</span> nb <span class=\"comment\"># numba jit, which will be introduced next</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@nb.njit(<span class=\"params\">nb.float64[:, :, :](<span class=\"params\">nb.float64[:, :, :], nb.int8</span>), parallel=<span class=\"literal\">True</span>, cache=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_lratios_jit</span>(<span class=\"params\">x: np.ndarray, nmom: <span class=\"built_in\">int</span> = <span class=\"number\">5</span></span>) -&gt; np.ndarray:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Calculates L-moments (up to the specified order) of an array of data using Numba JIT compilation.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        x (np.ndarray): A 3D array of data.</span></span><br><span class=\"line\"><span class=\"string\">        nmom (int, optional): The order of L-moments to compute (default is 5).</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Returns:</span></span><br><span class=\"line\"><span class=\"string\">        np.ndarray: An array containing L-moments up to the specified order.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sort_array_with_axis</span>(<span class=\"params\">x: np.ndarray, axis: <span class=\"built_in\">int</span></span>) -&gt; np.ndarray:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Sorts the input array along the specified axis.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Args:</span></span><br><span class=\"line\"><span class=\"string\">            x (np.ndarray): Input array.</span></span><br><span class=\"line\"><span class=\"string\">            axis (int): Axis along which to sort.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Returns:</span></span><br><span class=\"line\"><span class=\"string\">            np.ndarray: Sorted array.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nb.prange(x.shape[axis]):</span><br><span class=\"line\">            x[i] = np.sort(x[i])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    x = np.asarray(x, dtype=np.float64)</span><br><span class=\"line\">    n = x.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    x = sort_array_with_axis(x, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    sum_xtrans = np.empty_like(x[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">comb</span>(<span class=\"params\">n, r</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Computes the binomial coefficient (n choose r).</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Args:</span></span><br><span class=\"line\"><span class=\"string\">            n (int): Total number of items.</span></span><br><span class=\"line\"><span class=\"string\">            r (int): Number of items to choose.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Returns:</span></span><br><span class=\"line\"><span class=\"string\">            int: Binomial coefficient.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> r &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> r &gt; n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> r == <span class=\"number\">0</span> <span class=\"keyword\">or</span> r == n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        c = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, r + <span class=\"number\">1</span>):</span><br><span class=\"line\">            c = c * (n - i + <span class=\"number\">1</span>) // i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># First L-moment</span></span><br><span class=\"line\"></span><br><span class=\"line\">    l1 = np.<span class=\"built_in\">sum</span>(x, axis=<span class=\"number\">0</span>) / comb(n, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> nmom == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.expand_dims(l1, axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Second L-moment</span></span><br><span class=\"line\"></span><br><span class=\"line\">    comb1 = np.arange(n)</span><br><span class=\"line\">    coefl2 = <span class=\"number\">0.5</span> / comb(n, <span class=\"number\">2</span>)</span><br><span class=\"line\">    sum_xtrans[:] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nb.prange(n):</span><br><span class=\"line\">        sum_xtrans += (comb1[i] - comb1[n - <span class=\"number\">1</span> - i]) * x[i]</span><br><span class=\"line\">    l2 = coefl2 * sum_xtrans</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> nmom == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.stack((l1, l2))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Third L-moment</span></span><br><span class=\"line\"></span><br><span class=\"line\">    comb3 = np.zeros(n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        comb3[i] = comb(i, <span class=\"number\">2</span>)</span><br><span class=\"line\">    coefl3 = <span class=\"number\">1.0</span> / <span class=\"number\">3.0</span> / comb(n, <span class=\"number\">3</span>)</span><br><span class=\"line\">    sum_xtrans[:] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nb.prange(n):</span><br><span class=\"line\">        sum_xtrans += (</span><br><span class=\"line\">            comb3[i] - <span class=\"number\">2</span> * comb1[i] * comb1[n - <span class=\"number\">1</span> - i] + comb3[n - <span class=\"number\">1</span> - i]</span><br><span class=\"line\">        ) * x[i]</span><br><span class=\"line\">    l3 = coefl3 * sum_xtrans / l2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> nmom == <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.stack((l1, l2, l3))</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>由以上示例代码能计算出$\\lambda_1,\\lambda_2,\\tau_3$， 便可以由参数估计的公式给出参数值，进而描述Genextreme分布</p>\n<h3 id=\"jit编译\"><a href=\"#jit编译\" class=\"headerlink\" title=\"jit编译\"></a>jit编译</h3><p>jit 的全称是 Just-in-time，在我们使用的<code>numba</code>库里面则特指Just-in-time Compilation（即时编译）。因为Python的动态类型带来的低效率，需要使用jit技术加速python代码的运行。在代码第一次被执行时将被编译为高效的机器码，同时也能由编译器执行相应的编译优化，以提高执行效率。但是，<code>numba</code>并不是对所有的Python代码都有优化效果，使用前需要去<code>numba</code><a href=\"https://numba.readthedocs.io/en/stable/reference/pysupported.html\">的官方文档</a>查看他支持的python功能和<code>numpy</code>功能。</p>\n<p>在上一节中给出的代码就包含了<code>numba</code>包，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> numba <span class=\"keyword\">as</span> nb <span class=\"comment\"># &lt;- numba jit</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@nb.njit(<span class=\"params\">nb.float64[:, :, :](<span class=\"params\">nb.float64[:, :, :], nb.int8</span>), parallel=<span class=\"literal\">True</span>, cache=<span class=\"literal\">True</span></span>) </span><span class=\"comment\"># &lt;- decorator</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_lratios_jit</span>(<span class=\"params\">x: np.ndarray, nmom: <span class=\"built_in\">int</span> = <span class=\"number\">5</span></span>) -&gt; np.ndarray:</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>注意到使用了<code>@njit</code>函数装饰器，装饰器的参数里给出了输入输出数组的数据类型，以及<code>parallel=True</code>，<code>cache=True</code>等几个选项。他们的意义分别是开启自动循环并行化和编译缓存。这里将仅解释循环并行化，也可以看官方对循环自动并行化的<a href=\"https://numba.pydata.org/numba-doc/latest/user/parallel.html\">解释</a>。</p>\n<h4 id=\"循环并行化\"><a href=\"#循环并行化\" class=\"headerlink\" title=\"循环并行化\"></a>循环并行化</h4><p>假设代码在一个多CPU系统上运行，对于类似下文给出的没有交叉迭代以来关系的循环，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@njit(<span class=\"params\">parallel=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    n = x.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    a = np.sin(x)</span><br><span class=\"line\">    b = np.cos(a * a)</span><br><span class=\"line\">    acc = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prange(n - <span class=\"number\">2</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> prange(n - <span class=\"number\">1</span>):</span><br><span class=\"line\">            acc += b[i] + b[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc</span><br></pre></td></tr></table></figure>\n\n<p><code>numba</code>会自动将循环分配到CPU的多个核心上以增加并行度。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>文中的完整代码已放于Github仓库<a href=\"https://github.com/zyzh2002/pylm-spei\">pylm-spei</a>。要在正态化的步骤执行加速，可以参考<a href=\"https://pypi.org/project/numba-stats/\">numba-stats</a>。</p>"},{"title":"使用docker compose搭建wordpress博客","date":"2024-02-27T08:41:04.000Z","_content":"\n## 引言\n\n前几天嫖了华为云的HECS新用户优惠，69块钱就能上1c2G1M的服务器一年。手里刚好有ICP备案好的域名，就打算把原来部署在Netlify上的静态网站撤掉，把博客慢慢迁移到华为云上。\n\n### 架构设计\n\n考虑到这台HECS使用了新用户优惠，续费的时候不一定有这种价格，可以考虑使用docker compose构建架构以实现方便迁移。整个架构有三个容器，wordpress，mysql和nginx，其中wordpress使用php-fpm的版本。\n\n<!-- more -->\n\n## 前期准备\n\n### 安装Docker\n\nHECS服务器系统使用CentOS Stream 9。\n\n#### 设置仓库\n\n```bash\n$ sudo dnf install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n\n选用阿里云的镜像源：\n\n```bash\nsudo yum-config-manager \\\n    --add-repo \\\n    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n如果你的服务器位于境外，使用官方镜像源也许更快：\n\n```bash\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n#### 安装 Docker Engine-Community\n\n```bash\nsudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n```\n\n#### 启用docker服务\n\n```bash\nsudo systemctl enable docker --now\n```\n\n#### 测试\n\n```bash\n\n[root@hecs-166145 wordpress]# docker -v\nDocker version 25.0.3, build 4debf41\n[root@hecs-166145 wordpress]#\n```\n\n## 构建项目\n\n项目的目录结构如下：\n\n```text\n.\n├── compose.yml\n├── data\n│   ├── mysql\n│   └── wordpress\n├── nginx\n│   └── wordpress.conf\n└── tls_certs\n    ├── ffdhe2048.txt\n    ├── fullchain.pem\n    └── privkey.pem\n```\n\ncompose.yml是docker compose配置文件；data/目录里存放wordpress和mysql的数据文件；nginx/是nginx的配置目录；tls_certs/里存放了tls证书。\n\n### 配置docker compose\n\n`compose.yml`有如下内容：\n\n```yaml\nversion: '3'\nservices:\n  wordpress:\n    image: wordpress:6.4.3-php8.3-fpm-alpine\n    container_name: wordpress\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: 'mysql'\n      WORDPRESS_DB_USER: 'wdpress'\n      WORDPRESS_DB_PASSWORD: 'YOUR_PASSWORD'\n      WORDPRESS_DB_NAME: 'wd'\n    volumes:\n      - ./data/wordpress:/var/www/html\n    networks:\n      brg:\n        ipv4_address: 192.168.234.2\n\n  nginx:\n    image: nginx:alpine\n    container_name: nginx\n    volumes:\n      - ./nginx:/etc/nginx/conf.d\n      - ./tls_certs:/etc/sslcerts\n      - ./data/wordpress:/var/www/html\n    ports:\n      - 80:80\n      - 443:443\n    restart: always\n    networks:\n      brg:\n        ipv4_address: 192.168.234.3\n\n  mysql:\n    image: mysql:8.3.0-oraclelinux8\n    container_name: mysql\n    environment:\n      MYSQL_DATABASE: 'wd'\n      MYSQL_USER: 'wdpress'\n      MYSQL_PASSWORD: 'YOUR_PASSWORD'\n      MYSQL_RANDOM_ROOT_PASSWORD: '1'\n    volumes:\n      - ./data/mysql:/var/lib/mysql\n    restart: always\n    networks:\n      brg:\n        ipv4_address: 192.168.234.4\n\nnetworks:\n  brg:\n    ipam:\n      driver: default\n      config:\n        - subnet: \"192.168.234.0/24\"\n```\n\n其中定义了3个容器和1个网络。需要注意的是，wordpress容器中的/var/www/html目录被映射到./data/wordpress，同时该目录被映射到nginx容器中。注意容器的tag，更新容器的时候需要选定同类型的版本。\n\n### 配置nginx\n\n推荐使用Mozilla SSL Configuration Generator来生成适合你的SSL配置。本文中的配置文件在其生成的配置文件基础上修改而来。\n\n```nginx_conf\n# generated 2024-02-26, Mozilla Guideline v5.7, nginx 1.17.7, OpenSSL 1.1.1k, intermediate configuration\n# https://ssl-config.mozilla.org/#server=nginx&version=1.17.7&config=intermediate&openssl=1.1.1k&guideline=5.7\nserver {\n    listen 80;\n    listen [::]:80;\n\n    location / {\n        return 301 https://$host$request_uri;\n    }\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name YOUR_SERVER_NAME;\n    root /var/www/html;\n    index index.php;\n\n    ssl_certificate /etc/sslcerts/fullchain.pem;\n    ssl_certificate_key /etc/sslcerts/privkey.pem;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:MozSSL:10m;\n    ssl_session_tickets off;\n\n    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam\n    ssl_dhparam /etc/sslcerts/ffdhe2048.txt;\n\n    # intermediate configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;\n    ssl_prefer_server_ciphers off;\n\n    # HSTS (ngx_http_headers_module is required) (63072000 seconds)\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n\n    # OCSP stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    # replace with the IP address of your resolver\n    resolver 223.5.5.5;\n\n    location / {\n        try_files $uri $uri/ /index.php?$args;\n    }\n\n    location ~ \\.php$ {\n        try_files $uri =404;\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass 192.168.234.2:9000;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param PATH_INFO $fastcgi_path_info;\n    }\n}\n```\n\n该配置文件已经实现了伪静态，无需更多配置。记得将下一节中配置的TLS证书写进配置文件中。\n\n### 使用acme.sh配置TLS证书\n\nacme.sh 实现了 acme 协议， 可以从 letsencrypt 生成免费的证书。\n\n#### 安装acme.sh\n\n使用官方的安装脚本安装acme.sh:\n\n```bash\ncurl https://get.acme.sh | sh -s email=my@example.com\n```\n\n如果你的服务器在中国境内，可以使用gitee上的仓库安装acme.sh:\n\n```bash\ngit clone https://gitee.com/neilpang/acme.sh.git\ncd acme.sh\n./acme.sh --install -m my@example.com\n```\n\n#### 申请并安装证书\n\n推荐使用dns安装方式。参考<https://github.com/acmesh-official/acme.sh/wiki/dnsapi> 。\n将证书安装到./tls_certs中，并更改相应名称。别忘了将你的域名指向你的站点，特别的，如果你的服务器位于中国大陆，要开启80和443端口需要ICP备案，请确认备案状态再进行测试。\n\n### 启动\n\n要启动配置好的docker compose，运行以下命令：\n\n```bash\ndocker compose up\n```\n\n观察输出日志，直接使用域名访问服务器的443端口，进行初步配置。\n\n如果要让服务以后台运行，可以添加参数：\n\n```bash\ndocker compose up -d\n```\n\n容器就能后台运行并在服务器启动时自动启动。\n\n## 小结\n\n本部分中使用docker compose搭建了wordpress站点，并配置了TLS。下一节中将对其配置CDN访问以节省流量和防御攻击。\n","source":"_posts/使用docker-compose搭建wordpress博客.md","raw":"---\ntitle: 使用docker compose搭建wordpress博客\ndate: 2024-02-27 16:41:04\ncategories: 瞎折腾记录\ntags:\n---\n\n## 引言\n\n前几天嫖了华为云的HECS新用户优惠，69块钱就能上1c2G1M的服务器一年。手里刚好有ICP备案好的域名，就打算把原来部署在Netlify上的静态网站撤掉，把博客慢慢迁移到华为云上。\n\n### 架构设计\n\n考虑到这台HECS使用了新用户优惠，续费的时候不一定有这种价格，可以考虑使用docker compose构建架构以实现方便迁移。整个架构有三个容器，wordpress，mysql和nginx，其中wordpress使用php-fpm的版本。\n\n<!-- more -->\n\n## 前期准备\n\n### 安装Docker\n\nHECS服务器系统使用CentOS Stream 9。\n\n#### 设置仓库\n\n```bash\n$ sudo dnf install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n\n选用阿里云的镜像源：\n\n```bash\nsudo yum-config-manager \\\n    --add-repo \\\n    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n如果你的服务器位于境外，使用官方镜像源也许更快：\n\n```bash\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n#### 安装 Docker Engine-Community\n\n```bash\nsudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n```\n\n#### 启用docker服务\n\n```bash\nsudo systemctl enable docker --now\n```\n\n#### 测试\n\n```bash\n\n[root@hecs-166145 wordpress]# docker -v\nDocker version 25.0.3, build 4debf41\n[root@hecs-166145 wordpress]#\n```\n\n## 构建项目\n\n项目的目录结构如下：\n\n```text\n.\n├── compose.yml\n├── data\n│   ├── mysql\n│   └── wordpress\n├── nginx\n│   └── wordpress.conf\n└── tls_certs\n    ├── ffdhe2048.txt\n    ├── fullchain.pem\n    └── privkey.pem\n```\n\ncompose.yml是docker compose配置文件；data/目录里存放wordpress和mysql的数据文件；nginx/是nginx的配置目录；tls_certs/里存放了tls证书。\n\n### 配置docker compose\n\n`compose.yml`有如下内容：\n\n```yaml\nversion: '3'\nservices:\n  wordpress:\n    image: wordpress:6.4.3-php8.3-fpm-alpine\n    container_name: wordpress\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: 'mysql'\n      WORDPRESS_DB_USER: 'wdpress'\n      WORDPRESS_DB_PASSWORD: 'YOUR_PASSWORD'\n      WORDPRESS_DB_NAME: 'wd'\n    volumes:\n      - ./data/wordpress:/var/www/html\n    networks:\n      brg:\n        ipv4_address: 192.168.234.2\n\n  nginx:\n    image: nginx:alpine\n    container_name: nginx\n    volumes:\n      - ./nginx:/etc/nginx/conf.d\n      - ./tls_certs:/etc/sslcerts\n      - ./data/wordpress:/var/www/html\n    ports:\n      - 80:80\n      - 443:443\n    restart: always\n    networks:\n      brg:\n        ipv4_address: 192.168.234.3\n\n  mysql:\n    image: mysql:8.3.0-oraclelinux8\n    container_name: mysql\n    environment:\n      MYSQL_DATABASE: 'wd'\n      MYSQL_USER: 'wdpress'\n      MYSQL_PASSWORD: 'YOUR_PASSWORD'\n      MYSQL_RANDOM_ROOT_PASSWORD: '1'\n    volumes:\n      - ./data/mysql:/var/lib/mysql\n    restart: always\n    networks:\n      brg:\n        ipv4_address: 192.168.234.4\n\nnetworks:\n  brg:\n    ipam:\n      driver: default\n      config:\n        - subnet: \"192.168.234.0/24\"\n```\n\n其中定义了3个容器和1个网络。需要注意的是，wordpress容器中的/var/www/html目录被映射到./data/wordpress，同时该目录被映射到nginx容器中。注意容器的tag，更新容器的时候需要选定同类型的版本。\n\n### 配置nginx\n\n推荐使用Mozilla SSL Configuration Generator来生成适合你的SSL配置。本文中的配置文件在其生成的配置文件基础上修改而来。\n\n```nginx_conf\n# generated 2024-02-26, Mozilla Guideline v5.7, nginx 1.17.7, OpenSSL 1.1.1k, intermediate configuration\n# https://ssl-config.mozilla.org/#server=nginx&version=1.17.7&config=intermediate&openssl=1.1.1k&guideline=5.7\nserver {\n    listen 80;\n    listen [::]:80;\n\n    location / {\n        return 301 https://$host$request_uri;\n    }\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name YOUR_SERVER_NAME;\n    root /var/www/html;\n    index index.php;\n\n    ssl_certificate /etc/sslcerts/fullchain.pem;\n    ssl_certificate_key /etc/sslcerts/privkey.pem;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:MozSSL:10m;\n    ssl_session_tickets off;\n\n    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam\n    ssl_dhparam /etc/sslcerts/ffdhe2048.txt;\n\n    # intermediate configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;\n    ssl_prefer_server_ciphers off;\n\n    # HSTS (ngx_http_headers_module is required) (63072000 seconds)\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n\n    # OCSP stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    # replace with the IP address of your resolver\n    resolver 223.5.5.5;\n\n    location / {\n        try_files $uri $uri/ /index.php?$args;\n    }\n\n    location ~ \\.php$ {\n        try_files $uri =404;\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass 192.168.234.2:9000;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param PATH_INFO $fastcgi_path_info;\n    }\n}\n```\n\n该配置文件已经实现了伪静态，无需更多配置。记得将下一节中配置的TLS证书写进配置文件中。\n\n### 使用acme.sh配置TLS证书\n\nacme.sh 实现了 acme 协议， 可以从 letsencrypt 生成免费的证书。\n\n#### 安装acme.sh\n\n使用官方的安装脚本安装acme.sh:\n\n```bash\ncurl https://get.acme.sh | sh -s email=my@example.com\n```\n\n如果你的服务器在中国境内，可以使用gitee上的仓库安装acme.sh:\n\n```bash\ngit clone https://gitee.com/neilpang/acme.sh.git\ncd acme.sh\n./acme.sh --install -m my@example.com\n```\n\n#### 申请并安装证书\n\n推荐使用dns安装方式。参考<https://github.com/acmesh-official/acme.sh/wiki/dnsapi> 。\n将证书安装到./tls_certs中，并更改相应名称。别忘了将你的域名指向你的站点，特别的，如果你的服务器位于中国大陆，要开启80和443端口需要ICP备案，请确认备案状态再进行测试。\n\n### 启动\n\n要启动配置好的docker compose，运行以下命令：\n\n```bash\ndocker compose up\n```\n\n观察输出日志，直接使用域名访问服务器的443端口，进行初步配置。\n\n如果要让服务以后台运行，可以添加参数：\n\n```bash\ndocker compose up -d\n```\n\n容器就能后台运行并在服务器启动时自动启动。\n\n## 小结\n\n本部分中使用docker compose搭建了wordpress站点，并配置了TLS。下一节中将对其配置CDN访问以节省流量和防御攻击。\n","slug":"使用docker-compose搭建wordpress博客","published":1,"updated":"2025-01-28T02:30:43.923Z","_id":"cm6f6vz64000184vb7joud531","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>前几天嫖了华为云的HECS新用户优惠，69块钱就能上1c2G1M的服务器一年。手里刚好有ICP备案好的域名，就打算把原来部署在Netlify上的静态网站撤掉，把博客慢慢迁移到华为云上。</p>\n<h3 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h3><p>考虑到这台HECS使用了新用户优惠，续费的时候不一定有这种价格，可以考虑使用docker compose构建架构以实现方便迁移。整个架构有三个容器，wordpress，mysql和nginx，其中wordpress使用php-fpm的版本。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h3><p>HECS服务器系统使用CentOS Stream 9。</p>\n<h4 id=\"设置仓库\"><a href=\"#设置仓库\" class=\"headerlink\" title=\"设置仓库\"></a>设置仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">sudo</span> dnf install -y yum-utils \\</span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n\n<p>选用阿里云的镜像源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<p>如果你的服务器位于境外，使用官方镜像源也许更快：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-Docker-Engine-Community\"><a href=\"#安装-Docker-Engine-Community\" class=\"headerlink\" title=\"安装 Docker Engine-Community\"></a>安装 Docker Engine-Community</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启用docker服务\"><a href=\"#启用docker服务\" class=\"headerlink\" title=\"启用docker服务\"></a>启用docker服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> docker --now</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@hecs-166145 wordpress]# docker -v</span><br><span class=\"line\">Docker version 25.0.3, build 4debf41</span><br><span class=\"line\">[root@hecs-166145 wordpress]#</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建项目\"><a href=\"#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h2><p>项目的目录结构如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── compose.yml</span><br><span class=\"line\">├── data</span><br><span class=\"line\">│   ├── mysql</span><br><span class=\"line\">│   └── wordpress</span><br><span class=\"line\">├── nginx</span><br><span class=\"line\">│   └── wordpress.conf</span><br><span class=\"line\">└── tls_certs</span><br><span class=\"line\">    ├── ffdhe2048.txt</span><br><span class=\"line\">    ├── fullchain.pem</span><br><span class=\"line\">    └── privkey.pem</span><br></pre></td></tr></table></figure>\n\n<p>compose.yml是docker compose配置文件；data&#x2F;目录里存放wordpress和mysql的数据文件；nginx&#x2F;是nginx的配置目录；tls_certs&#x2F;里存放了tls证书。</p>\n<h3 id=\"配置docker-compose\"><a href=\"#配置docker-compose\" class=\"headerlink\" title=\"配置docker compose\"></a>配置docker compose</h3><p><code>compose.yml</code>有如下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">wordpress:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wordpress:6.4.3-php8.3-fpm-alpine</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">wordpress</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">WORDPRESS_DB_HOST:</span> <span class=\"string\">&#x27;mysql&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">WORDPRESS_DB_USER:</span> <span class=\"string\">&#x27;wdpress&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">WORDPRESS_DB_PASSWORD:</span> <span class=\"string\">&#x27;YOUR_PASSWORD&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">WORDPRESS_DB_NAME:</span> <span class=\"string\">&#x27;wd&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/wordpress:/var/www/html</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">brg:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">192.168</span><span class=\"number\">.234</span><span class=\"number\">.2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./nginx:/etc/nginx/conf.d</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./tls_certs:/etc/sslcerts</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/wordpress:/var/www/html</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:80</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">443</span><span class=\"string\">:443</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">brg:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">192.168</span><span class=\"number\">.234</span><span class=\"number\">.3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:8.3.0-oraclelinux8</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_DATABASE:</span> <span class=\"string\">&#x27;wd&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_USER:</span> <span class=\"string\">&#x27;wdpress&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_PASSWORD:</span> <span class=\"string\">&#x27;YOUR_PASSWORD&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_RANDOM_ROOT_PASSWORD:</span> <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/mysql:/var/lib/mysql</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">brg:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">192.168</span><span class=\"number\">.234</span><span class=\"number\">.4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">brg:</span></span><br><span class=\"line\">    <span class=\"attr\">ipam:</span></span><br><span class=\"line\">      <span class=\"attr\">driver:</span> <span class=\"string\">default</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">subnet:</span> <span class=\"string\">&quot;192.168.234.0/24&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中定义了3个容器和1个网络。需要注意的是，wordpress容器中的&#x2F;var&#x2F;www&#x2F;html目录被映射到.&#x2F;data&#x2F;wordpress，同时该目录被映射到nginx容器中。注意容器的tag，更新容器的时候需要选定同类型的版本。</p>\n<h3 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h3><p>推荐使用Mozilla SSL Configuration Generator来生成适合你的SSL配置。本文中的配置文件在其生成的配置文件基础上修改而来。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># generated 2024-02-26, Mozilla Guideline v5.7, nginx 1.17.7, OpenSSL 1.1.1k, intermediate configuration</span><br><span class=\"line\"># https://ssl-config.mozilla.org/#server=nginx&amp;version=1.17.7&amp;config=intermediate&amp;openssl=1.1.1k&amp;guideline=5.7</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen [::]:80;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        return 301 https://$host$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl http2;</span><br><span class=\"line\">    listen [::]:443 ssl http2;</span><br><span class=\"line\">    server_name YOUR_SERVER_NAME;</span><br><span class=\"line\">    root /var/www/html;</span><br><span class=\"line\">    index index.php;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /etc/sslcerts/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/sslcerts/privkey.pem;</span><br><span class=\"line\">    ssl_session_timeout 1d;</span><br><span class=\"line\">    ssl_session_cache shared:MozSSL:10m;</span><br><span class=\"line\">    ssl_session_tickets off;</span><br><span class=\"line\"></span><br><span class=\"line\">    # curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt; /path/to/dhparam</span><br><span class=\"line\">    ssl_dhparam /etc/sslcerts/ffdhe2048.txt;</span><br><span class=\"line\"></span><br><span class=\"line\">    # intermediate configuration</span><br><span class=\"line\">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;</span><br><span class=\"line\">    ssl_prefer_server_ciphers off;</span><br><span class=\"line\"></span><br><span class=\"line\">    # HSTS (ngx_http_headers_module is required) (63072000 seconds)</span><br><span class=\"line\">    add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;</span><br><span class=\"line\"></span><br><span class=\"line\">    # OCSP stapling</span><br><span class=\"line\">    ssl_stapling on;</span><br><span class=\"line\">    ssl_stapling_verify on;</span><br><span class=\"line\"></span><br><span class=\"line\">    # replace with the IP address of your resolver</span><br><span class=\"line\">    resolver 223.5.5.5;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        try_files $uri $uri/ /index.php?$args;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\">        try_files $uri =404;</span><br><span class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.+)$;</span><br><span class=\"line\">        fastcgi_pass 192.168.234.2:9000;</span><br><span class=\"line\">        fastcgi_index index.php;</span><br><span class=\"line\">        include fastcgi_params;</span><br><span class=\"line\">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">        fastcgi_param PATH_INFO $fastcgi_path_info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该配置文件已经实现了伪静态，无需更多配置。记得将下一节中配置的TLS证书写进配置文件中。</p>\n<h3 id=\"使用acme-sh配置TLS证书\"><a href=\"#使用acme-sh配置TLS证书\" class=\"headerlink\" title=\"使用acme.sh配置TLS证书\"></a>使用acme.sh配置TLS证书</h3><p>acme.sh 实现了 acme 协议， 可以从 letsencrypt 生成免费的证书。</p>\n<h4 id=\"安装acme-sh\"><a href=\"#安装acme-sh\" class=\"headerlink\" title=\"安装acme.sh\"></a>安装acme.sh</h4><p>使用官方的安装脚本安装acme.sh:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://get.acme.sh | sh -s email=my@example.com</span><br></pre></td></tr></table></figure>\n\n<p>如果你的服务器在中国境内，可以使用gitee上的仓库安装acme.sh:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://gitee.com/neilpang/acme.sh.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> acme.sh</span><br><span class=\"line\">./acme.sh --install -m my@example.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"申请并安装证书\"><a href=\"#申请并安装证书\" class=\"headerlink\" title=\"申请并安装证书\"></a>申请并安装证书</h4><p>推荐使用dns安装方式。参考<a href=\"https://github.com/acmesh-official/acme.sh/wiki/dnsapi\">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a> 。<br>将证书安装到.&#x2F;tls_certs中，并更改相应名称。别忘了将你的域名指向你的站点，特别的，如果你的服务器位于中国大陆，要开启80和443端口需要ICP备案，请确认备案状态再进行测试。</p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>要启动配置好的docker compose，运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up</span><br></pre></td></tr></table></figure>\n\n<p>观察输出日志，直接使用域名访问服务器的443端口，进行初步配置。</p>\n<p>如果要让服务以后台运行，可以添加参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>容器就能后台运行并在服务器启动时自动启动。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本部分中使用docker compose搭建了wordpress站点，并配置了TLS。下一节中将对其配置CDN访问以节省流量和防御攻击。</p>\n","excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>前几天嫖了华为云的HECS新用户优惠，69块钱就能上1c2G1M的服务器一年。手里刚好有ICP备案好的域名，就打算把原来部署在Netlify上的静态网站撤掉，把博客慢慢迁移到华为云上。</p>\n<h3 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h3><p>考虑到这台HECS使用了新用户优惠，续费的时候不一定有这种价格，可以考虑使用docker compose构建架构以实现方便迁移。整个架构有三个容器，wordpress，mysql和nginx，其中wordpress使用php-fpm的版本。</p>","more":"<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h3><p>HECS服务器系统使用CentOS Stream 9。</p>\n<h4 id=\"设置仓库\"><a href=\"#设置仓库\" class=\"headerlink\" title=\"设置仓库\"></a>设置仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">sudo</span> dnf install -y yum-utils \\</span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n\n<p>选用阿里云的镜像源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<p>如果你的服务器位于境外，使用官方镜像源也许更快：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-Docker-Engine-Community\"><a href=\"#安装-Docker-Engine-Community\" class=\"headerlink\" title=\"安装 Docker Engine-Community\"></a>安装 Docker Engine-Community</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启用docker服务\"><a href=\"#启用docker服务\" class=\"headerlink\" title=\"启用docker服务\"></a>启用docker服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> docker --now</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@hecs-166145 wordpress]# docker -v</span><br><span class=\"line\">Docker version 25.0.3, build 4debf41</span><br><span class=\"line\">[root@hecs-166145 wordpress]#</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建项目\"><a href=\"#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h2><p>项目的目录结构如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── compose.yml</span><br><span class=\"line\">├── data</span><br><span class=\"line\">│   ├── mysql</span><br><span class=\"line\">│   └── wordpress</span><br><span class=\"line\">├── nginx</span><br><span class=\"line\">│   └── wordpress.conf</span><br><span class=\"line\">└── tls_certs</span><br><span class=\"line\">    ├── ffdhe2048.txt</span><br><span class=\"line\">    ├── fullchain.pem</span><br><span class=\"line\">    └── privkey.pem</span><br></pre></td></tr></table></figure>\n\n<p>compose.yml是docker compose配置文件；data&#x2F;目录里存放wordpress和mysql的数据文件；nginx&#x2F;是nginx的配置目录；tls_certs&#x2F;里存放了tls证书。</p>\n<h3 id=\"配置docker-compose\"><a href=\"#配置docker-compose\" class=\"headerlink\" title=\"配置docker compose\"></a>配置docker compose</h3><p><code>compose.yml</code>有如下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">wordpress:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wordpress:6.4.3-php8.3-fpm-alpine</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">wordpress</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">WORDPRESS_DB_HOST:</span> <span class=\"string\">&#x27;mysql&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">WORDPRESS_DB_USER:</span> <span class=\"string\">&#x27;wdpress&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">WORDPRESS_DB_PASSWORD:</span> <span class=\"string\">&#x27;YOUR_PASSWORD&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">WORDPRESS_DB_NAME:</span> <span class=\"string\">&#x27;wd&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/wordpress:/var/www/html</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">brg:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">192.168</span><span class=\"number\">.234</span><span class=\"number\">.2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./nginx:/etc/nginx/conf.d</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./tls_certs:/etc/sslcerts</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/wordpress:/var/www/html</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:80</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">443</span><span class=\"string\">:443</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">brg:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">192.168</span><span class=\"number\">.234</span><span class=\"number\">.3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:8.3.0-oraclelinux8</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_DATABASE:</span> <span class=\"string\">&#x27;wd&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_USER:</span> <span class=\"string\">&#x27;wdpress&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_PASSWORD:</span> <span class=\"string\">&#x27;YOUR_PASSWORD&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_RANDOM_ROOT_PASSWORD:</span> <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/mysql:/var/lib/mysql</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">brg:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">192.168</span><span class=\"number\">.234</span><span class=\"number\">.4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">brg:</span></span><br><span class=\"line\">    <span class=\"attr\">ipam:</span></span><br><span class=\"line\">      <span class=\"attr\">driver:</span> <span class=\"string\">default</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">subnet:</span> <span class=\"string\">&quot;192.168.234.0/24&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中定义了3个容器和1个网络。需要注意的是，wordpress容器中的&#x2F;var&#x2F;www&#x2F;html目录被映射到.&#x2F;data&#x2F;wordpress，同时该目录被映射到nginx容器中。注意容器的tag，更新容器的时候需要选定同类型的版本。</p>\n<h3 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h3><p>推荐使用Mozilla SSL Configuration Generator来生成适合你的SSL配置。本文中的配置文件在其生成的配置文件基础上修改而来。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># generated 2024-02-26, Mozilla Guideline v5.7, nginx 1.17.7, OpenSSL 1.1.1k, intermediate configuration</span><br><span class=\"line\"># https://ssl-config.mozilla.org/#server=nginx&amp;version=1.17.7&amp;config=intermediate&amp;openssl=1.1.1k&amp;guideline=5.7</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen [::]:80;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        return 301 https://$host$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl http2;</span><br><span class=\"line\">    listen [::]:443 ssl http2;</span><br><span class=\"line\">    server_name YOUR_SERVER_NAME;</span><br><span class=\"line\">    root /var/www/html;</span><br><span class=\"line\">    index index.php;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /etc/sslcerts/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key /etc/sslcerts/privkey.pem;</span><br><span class=\"line\">    ssl_session_timeout 1d;</span><br><span class=\"line\">    ssl_session_cache shared:MozSSL:10m;</span><br><span class=\"line\">    ssl_session_tickets off;</span><br><span class=\"line\"></span><br><span class=\"line\">    # curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt; /path/to/dhparam</span><br><span class=\"line\">    ssl_dhparam /etc/sslcerts/ffdhe2048.txt;</span><br><span class=\"line\"></span><br><span class=\"line\">    # intermediate configuration</span><br><span class=\"line\">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;</span><br><span class=\"line\">    ssl_prefer_server_ciphers off;</span><br><span class=\"line\"></span><br><span class=\"line\">    # HSTS (ngx_http_headers_module is required) (63072000 seconds)</span><br><span class=\"line\">    add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;</span><br><span class=\"line\"></span><br><span class=\"line\">    # OCSP stapling</span><br><span class=\"line\">    ssl_stapling on;</span><br><span class=\"line\">    ssl_stapling_verify on;</span><br><span class=\"line\"></span><br><span class=\"line\">    # replace with the IP address of your resolver</span><br><span class=\"line\">    resolver 223.5.5.5;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        try_files $uri $uri/ /index.php?$args;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\">        try_files $uri =404;</span><br><span class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.+)$;</span><br><span class=\"line\">        fastcgi_pass 192.168.234.2:9000;</span><br><span class=\"line\">        fastcgi_index index.php;</span><br><span class=\"line\">        include fastcgi_params;</span><br><span class=\"line\">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">        fastcgi_param PATH_INFO $fastcgi_path_info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该配置文件已经实现了伪静态，无需更多配置。记得将下一节中配置的TLS证书写进配置文件中。</p>\n<h3 id=\"使用acme-sh配置TLS证书\"><a href=\"#使用acme-sh配置TLS证书\" class=\"headerlink\" title=\"使用acme.sh配置TLS证书\"></a>使用acme.sh配置TLS证书</h3><p>acme.sh 实现了 acme 协议， 可以从 letsencrypt 生成免费的证书。</p>\n<h4 id=\"安装acme-sh\"><a href=\"#安装acme-sh\" class=\"headerlink\" title=\"安装acme.sh\"></a>安装acme.sh</h4><p>使用官方的安装脚本安装acme.sh:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://get.acme.sh | sh -s email=my@example.com</span><br></pre></td></tr></table></figure>\n\n<p>如果你的服务器在中国境内，可以使用gitee上的仓库安装acme.sh:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://gitee.com/neilpang/acme.sh.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> acme.sh</span><br><span class=\"line\">./acme.sh --install -m my@example.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"申请并安装证书\"><a href=\"#申请并安装证书\" class=\"headerlink\" title=\"申请并安装证书\"></a>申请并安装证书</h4><p>推荐使用dns安装方式。参考<a href=\"https://github.com/acmesh-official/acme.sh/wiki/dnsapi\">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a> 。<br>将证书安装到.&#x2F;tls_certs中，并更改相应名称。别忘了将你的域名指向你的站点，特别的，如果你的服务器位于中国大陆，要开启80和443端口需要ICP备案，请确认备案状态再进行测试。</p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>要启动配置好的docker compose，运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up</span><br></pre></td></tr></table></figure>\n\n<p>观察输出日志，直接使用域名访问服务器的443端口，进行初步配置。</p>\n<p>如果要让服务以后台运行，可以添加参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>容器就能后台运行并在服务器启动时自动启动。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本部分中使用docker compose搭建了wordpress站点，并配置了TLS。下一节中将对其配置CDN访问以节省流量和防御攻击。</p>"}],"PostAsset":[{"_id":"source/_posts/SPEI计算的原理与算法优化/graph1.png","slug":"graph1.png","post":"cm6f6vz5z000084vbc6lyagbk","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cm6f6vz64000184vb7joud531","category_id":"cm6f7oq730000h0vbfgji0gwp","_id":"cm6f7oq750001h0vb43xtfbvv"},{"post_id":"cm6f6vz5z000084vbc6lyagbk","category_id":"cm6f7p3kp0002h0vbgvlr5r4v","_id":"cm6f7p3kq0003h0vbf12ddpzv"}],"PostTag":[],"Tag":[]}}